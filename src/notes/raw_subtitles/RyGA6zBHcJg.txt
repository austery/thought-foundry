你见过这些图吗？
你画过这些图吗？
如果你的回答是没有
那么恭喜你
躲过了软件开发历史上
最坑程序员的一段时间
这种叫做UML的图
曾经是每个程序员的必修课
但是画这个东西
比写文档和写unit test还要折磨人
因为
UML本质上是一种图形化的建模语言
所以有一套完整的语法规则
但又因为它们都是图案；和字母组成的
编程语言
相比较，熟练使用完全不是一个难度
我记不清
UML是什么时候退出历史舞台的了
只记得渐渐地大家都发现
我们只是在机械地按要求做图
但是画出来的东西，其实没什么人在看
然后渐渐地
大家就默契地决定不再画这玩意儿了
作为曾经叱咤江湖的一门手艺
它的成败因果能给我们留下不少教训
从这一点来说
UML就值得我给他立一个墓志铭
很多人不知道的是
UML不是独立出现的
进入90年代
随着计算机的普及
软件开发开始在大众行业里流行
同时
如何科学地管理软件开发的项目
也成为企业急需的答案
大家热衷于寻找
那个能解决所有问题的“大统一理论”
在这个时期
出现了很多框架
比如大家熟悉的Waterfall、Agile等等
它们的主要区别就在于
如何看待软件开发的生命周期（SDLC）
Waterfall认为
软件开发应该是一个大周期
而Agile认为
应该是一个一直重复的小周期
在1994年
有一家专门设计各种软件流程
框架的小公司
叫做Rational Software
他们也创立了自己的一个理论框架
叫做rational unified process，RUP
从宏观上来说
RUP和Waterfall有点类似
都是在一个大的周期里
相对线性地推进项目
从策划、设计、开发，到最后验收、交付
但它在细节上更丰富
比如图中所展示的，需求、设计、测试
这些步骤都贯穿了整个周期
它们几乎同步进行
然后互相配合
而不是像Waterfall那样
先做完一个，再接着下一个
既然所有步骤都会同步推进
那么各个参与方的沟通就很重要了
因为在RUP的框架里
前期准备占了非常大的比重
所以
如何让负责策划和设计的管理团队
以及负责开发和测试的技术团队
能进行深入的交流
就会对项目的效率起到决定性的影响
RUP的解决方案
就是
创造了一套完全用图案来表达的语言
这些用图案来描述的
宏观或者微观的技术内容
对应了RUP里各个阶段、
各个参与方需要了解的关键信息
对于非技术人员来说
比起代码和全是专业术语的文档
图案的学习门槛明显是要更低的
这套图形语言就是unified modeling language，
UML；虽然是为了配合RUP的流程
而设计出来的
但UML有非常广泛的通用性
自然也比RUP更早的出圈了
1996年，UML从RUP中独立出来
成立了标准委员会
包括惠普、IBM、微软在内的计算机巨头
都第一时间加入
IBM更是在03年大手一挥
耗资21亿美元直接收购了Rational Software
通过IBM的影响力
RUP和UML也获得了更大范围的传播
一时间
它似乎就是大家一直都在找的
那个能够完美解决软件开发流程的
“大统一理论”
但时间证明了，它并不是
在05年发布UML 2.0
重构了一下底层代码之后
UML标准就基本没有什么大更新了
而在15年底
IBM也悄咪咪地
终止了RUP专家和UML专家证书的发放
如果连亲爹、
把发证书搞成一门大生意的IBM
也不再愿意提供支持
那我觉得
没有什么比这个更能宣告它的死刑了
很多人说UML的死
或者说RUP的死
是Agile体系后来横扫全球
一统江湖造成的
我觉得这个理论不对
因为如果是这样
我下一期的【Agile之死】视频就不好说了 😄
UML的死，更多的是自己的问题
UML的尴尬在于
它没能跟上软件项目的发展
时代发展的第一个趋势是复杂度增加
比如UML里的state machine diagram
描绘状态机的图
状态机本身不复杂
但是状态的切换逻辑，随着软件的发展
会变得越来越复杂
对于代码和技术文档
这些文本，新增的复杂度
可以很容易地加进去
又或者通过超链接指向其他的地方
但state machine diagram
在设计上没有预留什么空间
所以只能用一些缩写
来传达额外的信息
这些缩写，有时候是某个enum值
有时候是某个函数的名称
但不管怎么样，都是残缺的
因为图片的空间有限
不少UML图都有着类似的难
以拓展、难以包含更多信息的问题
而UML标准的升级
也只围绕着底层数据结构的语法问题
没怎么考虑过这些实战问题
这导致了它们的实用性
在一步一步的下降
最后变成了鸡肋
时代发展的另一个趋势
是各种工具和流程的整合
GitHub就是一个典型的例子
现在的GitHub上面只有一个搜索框
这里的搜索结果同时包括了代码、commit、
issue、PR、开发中的讨论、
技术文档，等等
这体现出
GitHub是知道大家的开发习惯的
我们在日常工作中
经常需要翻阅旧代码、文档、
ticket等参考资料
补充前因后果
用于辅助决策
CTRL+F被使用的次数
可以说是仅次于CTRL+C和CTRL+V了
而在项目中包含的所有可参考资料里
以图片形式存在的UML
就显得格格不入了
因为图里的内容基本没法被搜索
也就很难融入到日常工作中
比如我要确认一下
某个object是否已经被定义了
我没法在class diagram里面搜
只能在代码里搜
这里我用了“基本”这个词
是因为UML本质上也是文本
从名字就能猜到，它的底下其实就是XML
只不过
他们犯了和【让编程再次伟大#25】视频里面吐槽的Graph
DB一样的错误
没有统一的语法
太多各种各样的格式的存在
导致渲染逻辑、
查询方法和接口都五花八门
像Visual Paradigm
或者Enterprise Architect之类的UML软件
确实可以提供搜索功能
但我相信没有多少人会愿意专门
打开一个UML专属软件
就是为了再搜一遍关键词
有些意识到这个问题的人
开始尝试
对UML进行更彻底的文本化改造
比如在GitHub上原生支持的Mermaid框架
就没有用XML定义
而是参照了Markdown的语法
这样UML图
就完美融入了
以Markdown为核心的GitHub文本体系
可以和其他资源一同被检索了
只不过我用了GitHub这么多年
就没见过几个repo里面
有出现过UML图的
这也很好理解
毕竟在这个年代
会把代码放上GitHub的人
和愿意花时间画UML的人
应该至少隔了一个辈分吧
当然UML并不是一无是处的
我觉得它只是出现在了错误的地方
古人有言：“a picture is worth a thousand words”
一图胜千言
在圣经《人月神话》中
Fred Brooks也有一句名言：
Show me your flowchart and conceal your tables
and I shall continue to be mystified. Show me your tables
and I won't usually need your flowchart
it will be obvious. 大概的意思就是
只看流程图我会一头雾水
但你直接把底下的数据表结构给我看
我甚至都不需要流程图
就能够看懂你的系统是干嘛的
这两句名言结合起来
就解释了UML的定位问题
正因为一张图里浓缩了千言
导致它会丢失大量的细节
作为需要精准到每一个字符的软件
开发，把它当做指导文件
还真的不如直接看源代码
如果围绕着这么模棱两可的要求进行
开发，项目组估计天天得吵架
但这也不代表
所有UML图都是毫无价值的
正因为浓缩了千言
图是一个完美的总结工具
可以高效地向读者传递重要信息
就比如在每个API文档上
都能看到的sequence diagram
作为展示API调用的宏观过程的UML图
它能够快速地
让用户获得一个大概的方向
知道整个调用流程会有多少个步骤
多少个参与方
哪些地方会有循环
哪些地方会有分支，等等
这些信息
能让用户更有针对地阅读
具体的API接口文档
更高效地进行后续的开发
资深的程序员甚至能从中看出
哪里可能是性能瓶颈
哪里可能需要更多的开发和维护成本，
等等；这是真正做到了一图胜千言
只可惜sequence diagram这种图
在UML里真是凤毛麟角
我甚至觉得
他们只是歪打正着地
做了一个很适合面向用户的图
毕竟整个UML从设计之初
就只考虑了开发前
和开发中的内部交流
而没有考虑过开发后的对外交流
我认为压倒UML的最后一根稻草，是RUP
这种瀑布流项目管理模式
在传统行业的没落
在互联网行业就不用多说了
快速迭代风格的Agile流派
几乎就是为了互联网而生的
而在传统行业
它也陆续失去了吸引力
比如说制造业曾经是RUP的自留地
因为制造业只有一次机会
软件安装在电路板上
装到机器上，卖出去，就没有回头路了
一次召回事件，就能毁掉一个公司
当年财大气粗的Intel
也差点被奔腾CPU的除法错误
所导致的全球召回事件
折腾掉半条命（挖坑）
所以对于他们
再长的开发周期也是可以接受的
但是进入21世纪之后
大众的消费习惯改变了
尤其是互联网大厂的各种软件产品
把消费者们调教到对“半成品”
习以为常的程度
经历了数字化和网络化升级的
传统行业
现在也具备了同样的开发能力
有关注电车行业的
应该对各大车厂的各种OTA新闻
见怪不怪了
不少消费者对此事怨念很大
觉得还是以前一手交钱
一手交货的老油车更好
但不可否认的是
OTA让车厂的研发周期大大缩短了
消费者也能更早地享受到新技术
所以也不怪“先上架、
后优化”的风气传播到各行各业
毕竟这种互联网方案带来的降维打击
真的谁用谁上瘾
那么当传统行业都不想再做冗长的
一次性交付的项目
RUP这种项目管理模式还有谁会买单呢？
可能只剩下
那些不追求盈利的政府项目了吧
我觉得UML已经完成了自己的使命
在软件工程的分工
已经相对成熟的今天
负责画饼的产品经理
负责催促的项目经理
负责设计的架构师
负责主导开发的tech lead，和负
责敲代码的程序员，各司其职
管理团队和技术细节的距离越来越远
就算现在某个产品经理有想法
在每天开完8个小时的会之后
他/她也没有那个精力
去审核某个数据表的结构设计了
但回到30年前
大家还在摸索软件工程的最佳实践
管理团队应该多深入
参与项目的设计和开发？
需要参与敲定多少技术细节？
一开始没有人知道最好的平衡点
所以我们如果换个角度
不把UML看作是给程序员的
来自top-down的开发要求
而是给管理团队的bottom-up的汇报工具
那么在那个迷茫的年代
它就是一个合理的存在
当然
这个定位在后面的实践中走歪了
就是企业自己的问题了
而作为一个以图案的形式
表达软件概念的工具
它帮助很多行业
很多企业完成了数字化的转型
吃上了计算机技术带来的红利
就这一点而言
我觉得它这一趟，没白来