Imagine
 you're
 building
 an
 AI
 product.


It
 gets
 10,000
 users
 overnight.
 Then
 AWS


sends
 you
 a
 bill
 that
 is
 bigger
 than


your
 revenue.
 The
 AI
 companies
 that


can't
 make
 economics
 work
 aren't


necessarily
 the
 ones
 with
 bad
 products.


They're
 often
 the
 ones
 with
 bad
 pricing.


Meanwhile,
 the
 ones
 that
 are
 making


money
 charge
 10
 times
 more
 than


traditional
 software,
 and
 customers
 are


paying.
 Grammarly
 slashed
 their
 free
 AI


offering
 by
 95%.
 Cursor
 jumped
 from
 20


to
 $200
 a
 month,
 a
 10
 times
 price
 gap


that
 would
 kill
 any
 traditional
 SAS


company.
 Replet
 started
 charging
 based


on
 computational
 effort,
 not
 features.


And
 it's
 working.
 Today
 I'm
 doing
 a
 deep


dive
 into
 which
 pricing
 models
 work
 for


AI
 products,
 which
 ones
 destroy
 unit


economics
 and
 margins,
 and
 how
 to
 price


an
 AI
 product
 that
 will
 not
 make
 the


founder
 go
 bankrupt.
 Let's
 dive
 in.


I
 got
 inspired
 to
 make
 this
 episode


after
 seeing
 Stripe's
 article,
 a


framework
 for
 pricing
 AI
 products.
 The


framework
 describes
 three
 monetization


formats
 most
 AI
 companies
 follow.


consumptionbased
 per
 API
 call
 per
 LLM


token,
 workflow
 based
 per
 completed
 task


or
 outcome
 based
 per
 successful
 outcome.


Simple,
 right?
 Well,
 not
 quite.
 In


traditional
 SAS,
 margins
 are
 80
 to
 90%.


Once
 infrastructure
 is
 deployed,
 adding


an
 extra
 user
 costs
 you
 nothing.
 In
 AI


products,
 the
 margins
 are
 reportedly
 50


to
 60%.


And
 that
 is
 because
 every
 user
 that
 you


add
 to
 your
 product
 burns
 tokens
 and


computing
 power.
 So
 your
 costs
 to


maintain
 clients
 or
 your
 cost
 to
 onboard


new
 clients
 can
 scale
 unpredictably.


I'll
 give
 you
 an
 example.
 Let's
 say


you're
 Figma
 and
 you
 have
 an
 enterprise


customer,
 customer
 A.
 You
 add
 a
 new
 AI


feature
 where
 a
 user
 can
 generate


designs
 based
 on
 their
 description.
 Your


customer,
 company
 A,
 loves
 the
 feature


and
 they
 start
 using
 it
 multiple
 times


every
 single
 day.
 You
 were
 hoping
 that


they'd
 use
 it,
 but
 maybe
 not
 as
 much.


And
 when
 they
 start
 doing
 it,
 your
 GPU


usage
 shoots
 up
 and
 a
 week
 later
 you
 get


your
 AWS
 bill
 and
 you
 see
 a
 300%
 spike.


This
 situation
 was
 not
 possible
 before


AI.
 And
 what
 AI
 has
 done
 to
 the
 unit


economics
 of
 businesses
 is
 that
 it


changed
 annual
 recurring
 revenue
 from


close
 to
 100%
 predictable
 to
 70%


predictable,
 30%
 consumption
 surprise.


We
 got
 to
 a
 point
 where
 your
 cost


forecasting
 needs
 to
 move
 from
 annual


planning
 to
 90day
 cycle.
 This
 is
 why


most
 AI
 founders
 go
 bankrupt.
 Well,
 it's


not
 like
 they
 become
 homeless
 all
 of
 a


sudden,
 but
 you
 know what
 I
 mean.
 This


is
 the
 reason
 why
 businesses
 fail
 and


why
 AI
 founders
 cannot
 sustain
 their


ventures
 for
 a
 long
 time
 because
 they


price
 like
 SAS.
 But
 the
 costs
 behave


like
 utilities.


Running
 marketing
 for
 a
 business
 is
 not


for
 the
 faint
 of
 heart.
 One
 tool
 for


email,
 one
 for
 social
 media,
 another
 one


for
 CRM,
 something
 else
 for
 WhatsApp,


and
 then
 three
 separate
 apps
 that
 track


analytics
 for
 three
 different
 use
 cases.


And
 all
 of
 it
 just
 to
 understand
 your


customers.
 But
 what
 if
 all
 of
 that
 just


worked
 and
 you
 didn't
 have
 to
 spend
 a


fortune?
 Brebo
 asked
 the
 same
 question


and
 they
 built
 the
 answer.
 An
 all-in-one


marketing
 and
 CRM
 suite
 for
 growing


teams
 that
 don't
 want
 enterprise
 chaos


or
 enterprise
 pricing.
 With
 Brebo,
 you


can
 run
 email,
 SMS,
 WhatsApp,
 and
 chat


campaigns
 from
 one
 clean
 platform.
 No


app
 fatigue,
 no
 endless
 platforms
 to


manage.
 Just
 seamless
 communication
 with


your
 customers
 wherever
 they
 find
 you.


Build
 automations
 in
 a
 few
 clicks.
 Send


a
 welcome
 series.
 Recover
 a
 cart.


Re-engage
 that
 lead
 who
 ghosted
 you
 in


Q2.
 And
 build
 that
 dashboard
 for


conversations.
 It
 will
 definitely
 make


your
 support's
 life
 a
 lot
 easier.
 And


it's
 not
 just
 marketing.
 Brevo
 includes


a
 powerful
 customer
 data
 platform,
 which


is
 essentially
 CRM
 and
 business


analytics
 combined
 in
 one
 place.
 It


turns
 all
 of
 your
 customer
 data
 into
 a


single
 source
 of
 truth
 and
 gives
 you
 a


360
 view
 of
 every
 single
 customer
 you


have.
 Also,
 Brevo's
 Aura
 AI
 helps
 you


write
 smarter,
 personalized
 emails
 and


send
 them
 at
 the
 perfect
 time,
 and
 that


feature
 is
 available
 even
 on
 the
 free


plan.
 Unlike
 other
 tools
 that
 charge
 per


contract,
 Brevo
 charges
 only
 for
 what


you
 send
 with
 transparent
 pricing
 that's


up
 to
 72%
 cheaper
 than
 competitors.
 So,


if
 you're
 ready
 to
 simplify
 your


marketing,
 unify
 your
 team,
 and
 optimize


your
 marketing
 spend,
 check
 out
 Brevo.


Huge
 thanks
 to
 Brevo
 for
 sponsoring
 this


part
 of
 the
 video.


We
 received
 an
 email
 from
 a
 young


founder
 whose
 name
 is
 Chandler
 and


Chandler
 was
 asking
 for
 advice
 on
 how
 he


should
 approach
 pricing
 for
 the
 app
 he's


building.
 I
 have
 been
 promising
 him
 this


video
 for
 almost
 2
 months,
 maybe
 more.


So,
 Chandler,
 this
 is
 for
 you,
 but
 I
 am


really
 sorry
 it
 took
 me
 2
 months.


Chandler
 is
 building
 a
 product
 called


Serenity
 Notebook.
 Check
 it
 out.
 The


link
 is
 in
 the
 description.
 What
 does
 it


do?
 Serenity
 notebook
 lets
 you
 use
 AI


technology
 to
 create
 and
 share
 real-time


visualizations
 with
 different
 types
 of


data
 in
 just
 one
 place.
 You
 can
 easily


build
 charts
 for
 CSV
 data,
 explore


computer
 a
 design
 models,
 and
 build


datarrich
 notebooks
 that
 update
 in
 real


time
 independent
 of
 programming
 language


or
 framework.
 Important
 clarification,


the
 core
 product
 that
 Chandler
 is


building
 works
 without
 AI.
 It
 doesn't


require
 AI.
 target
 users.
 According
 to


the
 founder,
 data
 scientists
 who
 can
 use


code
 in
 any
 language
 they
 write
 in,
 feed


it
 to
 serenity
 and
 it'll
 build
 the


charts.
 Engineers
 of
 various
 kinds,


electrical,
 mechanical,
 chemical,


biochemical,
 can
 visualize
 their
 work


using
 computer
 a
 design
 models
 or
 any


other
 type
 of
 specialized
 files.


business
 and
 analytics
 teams
 who
 can
 use


Serenity
 to
 create
 web
 dashboards
 and


scientists
 who
 can
 build
 custom


visualizations
 or
 physics
 simulations
 as


an
 example.
 Chandler's
 pricing
 so
 far


desktop
 version
 free
 for
 the
 time
 being


unlimited
 usage.
 Cloud
 plan
 starts
 at
 $8


a
 month.
 The
 rationale
 behind
 this
 is
 to


advertise
 hardware
 and
 hosting
 costs.


Chandler,
 if
 you're
 listening
 to
 this,


and
 I
 really
 hope
 that
 you
 are,
 there


are
 a
 couple
 things
 that
 I
 would


recommend
 that
 you
 do,
 because
 your


pricing
 strategy
 has
 fundamental
 flaws


and
 risks
 that
 could
 cost
 you
 tens
 of


thousands
 of
 dollars
 per
 year
 and


possibly
 your
 entire
 business
 long
 term.


So,
 the
 three
 fundamental
 risks
 that


you're
 signing
 up
 for
 in
 my
 view.
 Risk


number
 one,
 desktop
 cannibalization.
 If


you
 make
 desktop
 truly
 free
 for
 life
 or


for
 the
 foreseeable
 future
 with
 no


limits,
 I
 do
 not
 see
 how
 on
 earth
 you're


going
 to
 be
 selling
 your
 cloud
 component


because
 why
 would
 anyone
 pay
 for
 cloud


if
 they
 can
 use
 your
 desktop
 for
 free?


There
 is
 already
 evidence
 from
 your
 own


comparisons
 that
 you
 provided.
 Jupiter


is
 free
 and
 it
 makes
 no
 money.
 Jupiter


is
 a
 nonprofit
 living
 off
 of
 grants.


Observable
 tried
 free
 private
 notebooks.


Then
 they
 had
 to
 payw
 wall
 those
 and


when
 they
 did
 the
 users
 revolted.
 If
 you


keep
 desktop
 free
 with
 no
 limits,
 it's


not
 a
 business.
 It'll
 be
 a
 pet
 project.


My
 recommendation
 to
 you,
 keep
 it
 on


premium,
 but
 impose
 limits.
 For
 example,


two
 to
 three
 local
 notebooks,
 not


unlimited.
 one
 computer
 aid
 file
 at
 a


time,
 five
 AI
 credits
 per
 month,
 no


cloud
 hosting,
 no
 collaboration


features.
 I
 would
 recommend
 that
 you


look
 at
 how
 the
 company
 called
 Muro


structures
 their
 free
 tier.
 They
 give


you
 enough
 to
 see
 the
 full
 value,
 but


not
 enough
 to
 never
 upgrade.
 Risk
 number


two,
 underpricing.
 At
 $8
 a
 month,
 you


leaving
 massive
 value
 on
 the
 table


because
 here
 is
 what
 the
 market
 looks


like.
 The
 license
 for
 a
 computer
 aid


design
 commercialgrade
 software
 starts


at
 $75
 a
 month
 and
 goes
 all
 the
 way
 up


to
 $4,000.


Your
 potential
 competitor
 Hex
 starts
 at


$36
 and
 goes
 all
 the
 way
 up
 to
 $75
 per


user.
 Observable
 starts
 at
 $22
 to
 $25


per
 user.
 And
 most
 importantly,
 the


prices
 for
 the
 engineering
 team
 tools


start
 at
 $100
 per
 user.
 You
 are
 thinking


to
 price
 at
 eight.
 That's
 between
 $10
 to


$60
 per
 month
 per
 user
 left
 on
 the


table.
 At
 1,000
 users,
 that
 is
 more
 than


$100,000
 per
 year
 in
 lost
 revenue.
 My


recommendation,


start
 at
 $18
 a
 month
 minimum.
 If
 your


users
 don't
 pay
 $18
 for
 a
 tool
 that


visualizes
 data
 in
 a
 language
 agnostic


notebook
 with
 computer
 aid
 design


capabilities,
 you
 have
 a
 product


problem,
 not
 a
 pricing
 problem.
 When
 I


say
 product
 problem,
 I
 mean
 that
 it


either
 doesn't
 solve
 the
 problem
 of
 your


target
 user
 or
 there
 is
 a
 mismatch
 in


terms
 of
 perception
 of
 the
 product,


which
 is
 a
 marketing
 problem,
 different


one
 but
 still,
 or
 the
 product
 is
 not


strong
 enough
 to
 solve
 the
 problem
 all


the
 way
 to
 the
 end.
 But
 18
 bucks
 for


your
 product
 is
 less
 than
 minimal.
 Risk


number
 three,
 AI
 cost
 spillover.
 Your
 AI


features,
 custom
 visualizers
 will
 have


unpredictable
 compute
 costs.
 The
 moment


you
 get
 a
 power
 user,
 your
 unit


economics
 will
 collapse
 and
 your
 margins


will
 be
 buried.
 My
 recommendation,


credit-based
 AI
 pricing
 from
 the
 time


you
 launch.
 You
 can
 do
 something
 like


this.
 You
 can
 give
 five
 free
 AI
 credits


per
 month.
 For
 a
 pro
 plan,
 you
 offer
 100


credits
 per
 month.
 You
 do
 the
 math.


These
 numbers
 are
 hypothetical.
 I
 don't


know
 what
 your
 costs
 are,
 but
 you
 get


what
 I'm
 saying.
 This
 example
 is
 a
 Canva


Grammarly
 example.
 Users
 have
 adopted


behavior
 when
 they
 understand
 credits


and
 you
 as
 a
 founder
 avoid
 surprise


bills.
 To
 understand
 why
 your
 pricing


won't
 work,
 I
 want
 to
 look
 at
 what's


actually
 working
 in
 AI
 pricing
 right


now.
 Because
 the
 game
 and
 AI
 pricing
 has


changed
 completely.
 Premium
 as
 we
 knew


it
 is
 dead.
 The
 golden
 rule
 in


traditional
 SAS
 has
 always
 been
 to
 offer


40
 to
 60%
 of
 core
 features
 for
 free.
 The


whole
 point
 was
 habit
 formation.
 Users


would
 come
 to
 your
 product,
 they
 would


use
 it
 for
 a
 long
 time,
 they
 would
 hit


feature
 limitations,
 and
 if
 they
 like


the
 product
 enough,
 they
 go
 to
 upgrade.


Today's
 AI
 SAS
 companies
 have
 slashed


their
 free
 tier
 features
 to
 just
 20%
 of


what
 they
 had
 before.
 That
 is
 an
 80%


reduction
 in
 what
 users
 get
 for
 free.


The
 mindset
 shifted
 from
 try
 before
 you


buy
 to
 taste
 before
 you
 subscribe.
 So


let's
 go
 through
 what
 is
 now
 being


offered
 in
 modern
 AI
 premium
 models.


Grammarly,
 100
 monthly
 AI
 prompts
 for


free
 versus
 2,000
 paid.
 Notion,
 20
 total


AI
 responses,
 no
 reset.
 Monday.com,
 500


monthly
 AI
 credits
 and
 additional
 packs


at
 $200
 per
 month.
 Cursor
 is
 a
 perfect


example
 of
 how
 AI
 creates
 premium


pricing
 tiers.
 In
 the
 free
 tier,
 they've


got
 2,000
 completions
 and
 50
 slow


requests.
 In
 the
 pro
 tier,
 they've
 got


unlimited
 completions
 and
 unlimited
 slow


requests.
 In
 the
 ultra
 tier,
 they've
 got


20
 times
 more
 usage
 than
 Pro.
 AI


features
 create
 pricing
 gaps
 never
 seen


in
 traditional
 software.
 Cursor
 had
 a
 10


times
 jump.
 Copilot
 had
 a
 two
 times
 jump


and
 so
 did
 JetBrains.
 And
 the
 thing
 is,


users
 aren't
 pushing
 back.
 The
 market


has
 mentally
 accepted
 this
 model
 where


free
 comes
 with
 a
 meter.
 Then
 Replet


showed
 up
 and
 asked
 what
 if
 pricing


actually
 matched
 the
 pain
 of
 your
 GPU.


Replet
 introduced
 probably
 the
 most


logical
 pricing
 model
 among
 all
 AI
 apps


on
 the
 market.
 They
 call
 it
 an


effortbased
 checkpoint
 system.
 They


completely
 departed
 from
 traditional


software
 pricing
 and
 started
 charging


users
 based
 on
 computational
 work
 that


is
 being
 performed.
 The
 model
 works
 like


this.
 For
 simple
 tasks,
 they
 charge
 up


to
 15
 cents.
 For
 complex
 tasks,
 up
 to
 a


dollar.
 The
 price
 that
 they
 charge


directly
 correlates
 with
 AI
 model


inference
 costs.
 And
 here
 is
 how
 it


works.
 Technically,
 the
 system
 measures


computational
 units
 in
 real
 time.
 An


agent
 analyzes
 task
 complexity
 before


execution.
 It
 estimates
 CPU
 cycles,


memory
 usage,
 and
 required
 model
 calls.


It
 calculates
 the
 cost
 based
 on


predicted
 computational
 effort.
 After


that,
 it
 tracks
 actual
 resource


consumption
 during
 the
 task
 and
 then
 at


the
 end
 it
 charges
 based
 on
 actual


effort.
 What
 Replet
 did
 is
 that
 they


essentially
 aligned
 pricing
 to
 the
 pain


and
 serenity
 is
 about
 to
 give
 away
 the


pain
 for
 free.
 Replet's
 example
 shows


how
 far
 pricing
 can
 be
 pushed
 when
 you


align
 it
 to
 raw
 compute.
 But
 not
 every


product
 can
 or
 should
 go
 that
 far.
 Let


me
 show
 you
 what
 works
 across
 different


types
 of
 AI
 products
 and
 where
 Serenity


fits.
 When
 AI
 delivers
 a
 discrete
 and


measurable
 outcome
 that
 directly


replaces
 human
 work.
 So
 for
 example,


things
 like
 a
 document
 review
 or
 a


customer
 support
 ticket
 that
 gets


resolved.
 What
 works
 is
 outcomebased


pricing
 when
 you
 charge
 per
 successful


outcome.
 For
 example,
 medical
 imaging
 AI


charges
 between
 $2
 to
 $15
 per
 scan.
 AI


tools
 for
 sales
 teams
 charge
 per


qualified
 meeting
 booked,
 not
 per


outreach
 attempt.
 When
 AI
 automates


repetitive
 workflows,
 compliance
 checks


or
 claims
 processing,
 what
 works
 is


subscription
 plus
 usage
 credits.
 The


base
 subscription
 covers
 platform
 access


and
 credits
 kick
 in
 when
 automation


executes.
 A
 few
 examples
 for
 this
 type


of
 pricing.
 Revenue
 cycle
 AI
 in


healthcare
 2
 to
 5%
 of
 recovered
 billing


revenue.
 Compliance
 AI
 offers
 5
 to


$25,000
 a
 month
 subscription
 plus


credits
 per
 documents
 checked.
 When
 AI


augments
 individual
 productivity,


writing
 assistance,
 design
 tools,
 code


completion,
 what
 works
 is
 premium
 plus


credit
 consumption.
 You
 provide
 generous


free
 tier
 limited
 by
 AI
 credits
 and
 then


you
 package
 it
 as
 a
 tiered
 subscription,


multiple
 seedbased
 plans
 with
 escalating


AI
 quotas.
 Examples:
 Chad
 GPT,
 free
 for


basic,
 paid
 for
 advanced
 models
 and


higher
 limits.
 Canva
 free
 users
 get
 very


limited
 AI
 prompts.
 Microsoft
 Pilot


integrates
 into
 Microsoft
 365
 but
 full


features
 required
 paid
 subscription.


When
 AI
 delivers
 insights,
 forecasts
 or


analytics,
 what
 works
 is
 subscription


tiers.
 You
 combine
 seedbased
 pricing


with
 feature
 tiers.
 Examples:
 marketing


analytics
 AI
 from
 $100
 to
 $1,000
 per


user
 per
 month
 for
 dashboard
 access
 plus


credits
 per
 query.
 HR
 performance
 AI


from
 $10
 to
 $100
 per
 user
 per
 month.
 The


vast
 majority
 of
 successful
 AI
 companies


follow
 one
 of
 these
 patterns
 and
 you


need
 to
 do
 the
 same
 because
 this
 works.


Let
 me
 map
 Serenity
 to
 one
 of
 these


verticals.


In
 my
 opinion,
 the
 way
 I
 see
 your


product,
 you
 map
 to
 two
 of
 these


categories.
 Productivity
 apps
 because


you
 make
 technical
 professionals
 more


productive
 with
 tools
 for
 charts,
 data,


computer
 A
 designs,
 and
 instant
 AI


visualization
 and
 analytical
 and
 insight


platforms
 because
 you
 take
 raw
 data
 and


produce
 visualizations.
 My


recommendation
 based
 on
 what
 I
 just


said,
 premium
 with
 credit
 consumption


because
 your
 product
 is
 following
 a


productled
 growth
 motion
 where


acquisition,
 retention,
 and
 onboarding


are
 driven
 by
 the
 product.
 Credit
 based


pricing
 for
 AI
 heavy
 features
 because


you're
 going
 to
 need
 to
 offset
 compute


costs
 so
 you
 don't
 drown
 in
 bills.
 And


finally,
 and
 I
 know
 you
 didn't
 ask
 for


this,
 but
 I'm
 going to
 do
 it
 anyway


because
 I'm
 going
 to
 regret
 if
 I
 don't.


I
 would
 like
 to
 challenge
 your
 thinking


around
 B2C
 market
 orientation.


I
 did
 a
 quick
 audience
 analysis
 for
 you


and
 I
 really
 really
 recommend
 that
 you


reconsider.
 Your
 product
 already
 has
 a


lot
 of
 unique
 selling
 points.
 If
 I'm
 not


mistaken,
 you're
 the
 only
 one
 combining


computer
 a
 designs
 with
 data


visualizations
 in
 a
 notebook
 style
 app.


You
 are
 language
 agnostic
 which
 is
 a


massive
 differentiator
 on
 the
 market.


And
 lastly,
 which
 I
 think
 is
 fantastic,


you
 are
 not
 AI
 first.
 Your
 product
 does


not
 have
 AI
 first
 positioning.
 You're


not
 an
 AI
 app,
 which
 is
 a
 huge
 plus


because
 your
 product
 solves
 a
 problem


even
 if
 there
 is
 no
 AI.
 I
 want
 to
 come


back
 to
 your
 target
 audience.
 You
 said


engineers,
 data,
 machine
 learning,


business
 analysts,
 and
 scientists.
 My


recommendation
 is
 to
 make
 engineering


your
 primary
 target.
 When
 I
 say


engineering,
 I'm
 talking
 about
 all
 kinds


of
 engineering.
 Electrical,
 chemical,


civil,
 mechanical,
 IoT.
 Basically,
 all


kinds
 of
 engineering
 far
 beyond


software.
 Why?
 Because
 your
 product


solves
 their
 highest
 pain.
 There
 is
 no


unified
 computer
 a
 design
 plus
 notebook


solution
 on
 the
 market
 today.
 engineers


that
 you're
 going
 to
 be
 targeting
 have


very
 high
 purchasing
 power
 because


engineer
 oriented
 products
 easily
 charge


$25
 to
 $50
 per
 month
 per
 user
 and
 for


team
 plans
 it's
 between
 $100
 to
 $200
 per


month.
 You're
 going
 to
 have
 a
 very
 high


expansion
 potentials
 because
 entire


engineering
 orgs
 need
 this
 tool
 for
 data


machine
 learning
 deep
 learning.
 Make


them
 your
 secondary
 target.
 Why?
 because


you're
 going
 to
 be
 solving
 medium
 pain


and
 the
 pain
 is
 medium
 because
 they
 have


alternatives
 like
 Jupiter
 or
 Mattplot


lib.
 You
 have
 a
 good
 expansion
 potential


in
 this
 vertical
 and
 data
 science
 as
 a


whole
 has
 a
 larger
 total
 addressable


market
 than
 engineering.
 Scientists
 and


researchers
 make
 them
 your
 tertiary


audience.
 Why?
 Because
 they
 have
 high


pain
 but
 low
 budgets.
 Academia
 relies


and
 depends
 on
 grants.
 They
 constantly


fight
 for
 everything
 including
 software


licenses.
 The
 upside
 of
 this
 audience
 is


that
 the
 free
 tier
 will
 work
 really
 well


for
 them.
 They
 will
 build
 a
 community


for
 you.
 And
 in
 general,
 academic


community
 is
 fantastic
 for
 brand


building
 and
 word
 of
 mouth.
 They're
 not


going
 to
 bring
 you
 a
 ton
 of
 money,
 but


they're
 fantastic
 for
 branding.
 And


lastly,
 business
 analysts
 and
 all
 kinds


of
 business
 use
 cases.
 I
 recommend
 that


you
 drop
 this
 because
 pain
 for
 these


folks
 is
 not
 big
 enough.
 You're
 going
 to


be
 competing
 with
 at
 least
 Tableau,


PowerBI,
 and
 Adobe
 Analytics.
 If
 you


spread
 too
 thin,
 you're
 going
 to
 be


fighting
 massive
 competitors
 without


going
 allin.
 And
 remember,
 narrow
 is
 the


moat.


Here
 is
 what
 I
 think
 you
 are
 missing
 and


something
 that
 I
 really
 want
 to


recommend.
 Think
 about
 switching
 to
 B2B


market
 orientation.
 Why?
 Let's
 go
 back


to
 your
 audience.
 When
 do
 mechanical


engineers
 or
 data
 engineers
 use
 data


visualization
 tools
 or
 3D
 modeling


software?
 At
 work,
 not
 at
 home.


Engineering
 is
 collaborative
 by


definition.
 How
 many
 engineers
 work


alone?
 I've
 been
 in
 tech
 for
 almost
 10


years.
 I
 haven't
 met
 a
 single
 engineer


who
 wasn't
 on
 the
 team.
 Where
 do


scientists
 spend
 time?
 research
 R&D


labs.
 PhD
 students
 basically
 live
 at


those
 labs.
 Primary
 use
 cases,


visualizing
 experiments,
 research
 with


collaborators,
 creating
 notebooks
 for


publications,
 or
 managing
 lab
 data.


Scientists
 almost
 always
 work
 in
 groups.


The
 results
 of
 their
 work
 must
 be


reproducible.
 They
 must
 be
 sharable
 and


stored
 for
 compliance.
 Every
 single
 user


profile
 you're
 targeting
 will
 be
 using


your
 product
 at
 work.
 This
 is
 the


definition
 of
 B2B
 orientation.
 Your


product
 caters
 to
 biotech,


manufacturing,
 R&D
 labs,
 engineering


consultancies,
 university
 PhD


department,
 research
 labs,
 IoT
 and


physical
 product
 development
 groups.
 The


revenue
 potential
 in
 B2B
 is
 enormous.


What
 you're
 building
 is
 a
 fairly
 niche,


but
 not
 too
 niche
 of
 a
 product.
 You


already
 have
 product
 differentiation.


You
 clearly
 have
 taste
 and
 your
 website


proves
 it.
 That
 is
 a
 skill
 that
 not
 many


B2B
 founders
 have.
 I
 mean,
 have
 you
 seen


B2B
 software?
 This
 leads
 me
 to
 my
 final


recommendation.
 Start
 designing
 for


teams.
 Right
 now,
 you're
 clearly


designing
 for
 a
 B2C
 use
 case,
 but
 I


recommend
 that
 you
 start
 thinking
 in


teams
 and
 network
 effects.
 Collaboration


will
 be
 your
 bread
 and
 butter.
 Seamless


onboarding,
 inviting
 a
 teammate,
 sharing


with
 a
 teammate,
 real
 time
 collaboration


on
 notebooks.
 Explore
 how
 Loom,
 Mero,


Dropbox
 set
 up
 their
 network
 effects


when
 they
 were
 starting
 out.
 B2C
 can
 be


your
 entry
 point
 for
 validation,
 data


gathering,
 brand
 building.
 But
 your


revenue
 sits
 with
 B2B.
 Let's
 do
 a
 quick


math.
 Current
 B2C
 focus,
 $8
 per
 month


per
 user.
 At
 1,000
 users,
 that
 is
 96,000


per
 year.
 Alternative
 scenario,
 B2B


focus,
 $50
 per
 month
 per
 team
 seat.


That's
 a
 conservative
 estimate.
 Way


below
 typical
 computer
 a
 design
 viewer


pricing.
 Let's
 say
 your
 target
 is
 200


team
 seats
 across
 40
 companies,
 five


seats
 on
 average.
 That
 is
 $120,000
 a


year.
 And
 here
 is
 the
 real
 opportunity.


Typical
 engineering
 team
 budget
 is


between
 $100
 and
 $200
 per
 user
 for


specialized
 tools.
 If
 Serenity
 positions


itself
 as
 an
 engineering
 tool,
 you
 can


charge
 $100
 per
 month
 per
 seat.
 If
 you


sell
 200
 seats,
 that's
 $240,000


a
 year.
 Same
 product,
 different


positioning,
 two
 and
 a
 half
 times


revenue.
 At
 $8
 per
 month
 B2C


orientation,
 you
 are
 leaving
 over


$100,000
 on
 the
 table.
 If
 you
 compare


yourself
 to
 the
 B2B
 engineering


positioning
 conclusion,


the
 companies
 that
 cannot
 make
 economics


work,
 the
 companies
 that
 are
 going


bankrupt
 aren't
 always
 the
 ones
 with
 bad


products.
 They're
 the
 ones
 with
 bad


pricing.
 Same
 product,
 different


pricing,
 10
 times
 outcome.
 To
 all


founders,
 including
 Chandler,
 you're


building
 something
 genuinely
 innovative.


Don't
 let
 your
 pricing
 be
 the
 reason
 it


fails.
 Get
 it
 right
 and
 build
 a


sustainable
 business.
 Build
 something


that
 will
 last.
 I
 hope
 this
 was
 helpful.


Thank
 you
 for
 listening.
 We'll
 see
 you


next
 time.
 Bye.