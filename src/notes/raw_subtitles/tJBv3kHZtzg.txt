Okay.
 Uh
 well,
 just
 wait
 for
 another
 uh


minute
 and
 then
 I'll
 start.
 Uh
 there's


recording.
 So
 uh
 if
 you
 want
 to
 share


this
 with
 your
 friend,
 uh
 you
 probably


just
 joined
 from
 Maven
 the
 Lightning


course,
 you
 can
 just
 share
 that
 and
 uh


uh
 we'll
 upload
 the
 recording
 and
 you


can
 access
 get
 access
 to
 the
 recording


that
 way.


>> Yeah.


>> How
 is
 everyone?
 So,
 uh,
 let's


like
 where
 let's
 type
 in
 chat
 where
 are


you
 from?


I
 found
 that
 to
 be
 like
 a


interesting


engagement


and
 because
 we
 have
 uh
 a
 lot
 of
 stuff
 to


cover
 and
 uh
 uh
 we
 have
 a
 large
 audience


so
 uh
 I'll
 take
 uh
 questions
 at
 the
 end.


Um,
 you
 can
 just
 type
 your
 question
 uh


in
 chat
 or
 if
 you
 know
 how
 to
 do
 that


there
 is
 a
 Q&A
 function
 and
 you
 can
 type


your
 question
 over
 there
 or
 just
 leave


in
 chat
 and
 then
 I'll
 try
 to
 uh
 I'll
 do


my
 best
 to
 uh
 cover
 those
 questions.
 All


right,
 let's
 start.
 Uh
 Riley,
 you
 can


take
 over
 and
 uh
 start
 presenting.


>> Okay.
 Uh


okay,
 let
 me


Uh
 let
 me
 share
 my
 screen.


Can
 you
 see
 it?


>> Yep.
 Yep.


>> Yep.
 Okay.
 So
 I
 know
 this
 uh
 webinar
 is


about
 like
 my
 experience
 about


going
 to
 hackathons.
 So
 today
 I'm
 going


to
 share
 my
 experience
 of
 going
 to
 all


these
 hackathons.
 They
 actually
 boils


down
 to
 like
 five
 key
 key
 principles.
 So


hopefully
 like
 um
 after
 this
 you
 will


feel
 more
 confident
 going
 to
 different


hackathons
 and
 you
 will
 like
 squeeze
 the


most
 value
 of
 all
 the
 events
 that
 you
 go


to.


Uh
 okay.
 So
 a
 little
 bit
 about
 myself.


Uh
 I
 I'm
 right
 now
 a
 monetization


product
 at
 Fortnite
 Epic
 Games
 and
 this


is
 al
 also
 my
 little
 Red
 Node.
 Um
 I
 post


some
 things
 on
 Red
 Note
 too.
 I
 so
 my
 job


is
 remote
 so
 I
 mostly
 stayed
 in
 Bay
 Area


and
 you
 know
 like
 there's
 a
 lot
 of


events
 going
 on
 Bay
 Area
 so
 I
 usually
 go


to
 hackathons
 with
 my
 friends
 and
 all


the
 different
 events.
 Yeah.
 Um
 is
 there


anything
 else
 I
 should
 talk
 about
 myself


>> like
 why
 are
 you
 talking
 about
 uh


successful
 hackathons?
 What
 is
 your


achievements
 at
 different
 hackathons?


>> Yeah.
 Um
 I
 started
 going
 to
 hackathons


maybe
 in
 2023ish.


Um,
 so
 I'm
 actually
 a
 pretty
 late


starter
 on
 hackathons
 and
 um
 I
 think
 in


total
 I've
 been
 winging
 maybe
 around


like
 um
 85k
 like
 credits
 plus
 cash.
 I


just
 happened
 to
 find
 like
 I'm
 my
 wing


rate
 of
 hackathon
 is
 like
 pretty
 high


and
 I
 started
 posting
 like
 notes
 on


retail
 and
 then
 I
 got
 a
 lot
 of


questions.
 So
 um
 we
 think
 it's
 it
 might


be
 a
 good
 idea
 do
 a
 webinar
 and
 share


with
 like
 what
 I've
 learned
 in
 different


hackathons


>> and
 uh
 most
 notably
 you
 won
 first
 place


at
 two
 of
 the
 most
 competitive


hackathons
 right
 the
 YC
 and
 open


hackathon


>> yeah
 there
 was
 like
 a
 cognition


hackathon
 cognition
 and
 winsf
 so
 we
 got


the
 first
 place
 of
 that
 one
 that
 one
 is


also
 have
 like
 the
 highest
 the
 like
 the


biggest
 prize
 pool
 that
 one


single-handedly


contributed
 64k


um
 like
 credits
 and
 cash
 to
 my
 entire


hackathon
 reward
 pool.
 Yeah,
 we
 also
 got


another
 one
 um
 project
 is
 called
 Oreo
 in


we
 actually
 got
 win
 kind
 of
 like
 two
 YC


hackathon.
 The
 first
 one
 project
 is


called
 Showya.ai.
 That
 one
 got
 the
 third


prize
 uh
 the
 third
 place
 of
 the
 entire


hackathon.
 in
 the
 another
 YC
 hackathon,


our
 project
 Oreo
 got
 um
 the
 best
 use
 of


convex
 and
 the
 best
 use
 of
 basel.


>> And
 uh
 in
 addition
 to
 the
 you
 know
 the


winning
 and
 the
 credits
 and
 the
 cash,


you
 also
 got
 beating
 time
 with
 Andrew


Capathy
 CEO
 at
 Warell.
 Uh
 I
 don't
 know


how
 to
 pronounce
 his
 name.


>> Yeah.
 Uh
 we
 got
 like
 um
 yeah
 it's
 it's


interesting
 like
 not
 only
 do
 we
 get
 like


cash
 and
 rewards
 we
 also
 got
 a
 lot
 of


meaningful
 networking
 out
 of
 those


things.
 For
 example
 in
 one
 one
 the
 first


YC
 hackathon
 we
 got
 invited
 to
 launch


with
 the
 wordware
 CTO
 and
 then
 uh
 we


also
 like
 in
 the
 cognition
 hackathon
 we


got
 invited
 to
 the
 cognition
 hacker


house
 to
 have
 dinner
 with
 the
 entire


team.
 Um
 and
 then
 in
 the
 third
 hackathon


I
 think
 we
 got
 invited
 to
 a
 lot
 of


convex
 events.
 Uh
 we
 got
 connected
 with


the
 Verscell
 CEO.
 Uh
 we
 also
 got
 invited


um
 to
 like
 a
 private
 chat
 with
 a
 YC


partner.


>> Nice.
 Let's
 start.


>> Yeah.
 Okay.
 Um
 so
 here
 let
 me
 just
 do
 a


little
 bit
 demo
 because
 this
 is
 I'm
 very


proud
 of
 this
 project.
 It's
 a
 working


demo.
 This
 is
 the
 project
 I
 was
 talking


about
 that
 won
 the
 first
 place
 of
 um
 the


wings
 surf
 and
 cognition
 hackathon.
 It's


called
 over
 easy.
 So
 I
 will
 give
 this


demo
 as
 in
 a
 very
 similar
 way
 that
 how


we
 give
 this
 demo
 and
 the
 the
 final


presentation
 in
 the
 hackathon.
 So
 you


will
 have
 like
 if
 so
 for
 those
 who
 have


never
 been
 to
 a
 hackathon
 you
 will
 have


an
 idea
 of
 how
 um
 the
 final
 presentation


at
 least
 what
 it
 looks
 like
 for
 us.
 So


over
 easy
 is
 a
 a
 vibe
 hacking
 agent
 that


we
 build
 to
 help
 people
 evaluate
 if


they're
 viodated
 apps
 are
 um
 are
 secure


or
 not.
 So
 all
 of
 things
 you
 can
 see
 are


built
 in
 seven
 hours
 in
 the
 hackathon
 on


the
 spot.
 Um
 and
 then
 after
 that
 we
 did


a
 little
 bit
 deployment
 to
 make
 it
 a


little
 better
 but
 I
 would
 say
 95%
 is
 the


same
 including
 that
 like
 killed
 killed


animation.
 So
 to
 use
 this
 um
 you
 start
 a


new
 test
 run
 you
 put
 in
 a
 website
 URL


that
 you
 want
 to
 test.
 So
 here
 I
 just


picked
 a
 lovable
 project
 um
 and
 then
 you


follow
 the
 instructions.
 you
 would
 do


some
 um
 activities
 on
 the
 website
 and
 in


the
 end
 you
 can
 paste
 the
 logs
 here
 to


help
 the
 agents
 um
 kind
 of
 like
 do
 its


job.
 So
 for
 time
 purpose
 I'm
 not
 going


to
 do
 the
 entire
 demo
 uh
 but
 I
 will
 show


you
 like
 the
 result
 of
 some
 previous


runs
 that
 we
 did.
 So
 you
 can
 see
 um
 so


how
 this
 works
 is
 that
 we
 have
 a
 very


simple
 agent
 that's
 going
 through
 all


the
 APIs
 that
 you
 paste
 into
 it.
 It
 will


just
 keep
 go
 through
 every
 API
 endpoint


and
 see
 if
 it
 can
 find
 any
 loopholes
 and


in
 the
 end
 it
 will
 summarize
 the
 results


here.
 The
 UI
 is
 not
 perfect.
 We
 try
 our


best.
 It's
 like
 a
 very
 short
 limited


time.
 But
 you
 can
 see
 it
 finds
 some
 very


high
 critical
 uh
 loopholes.
 first
 is


anyone
 can
 read
 all
 private
 messages


from
 all
 users.
 So
 if
 we
 go
 to
 the
 one


of
 the
 network
 request
 um
 calls,
 you
 can


see
 the
 results.
 It's
 actually
 like
 all


the
 messages
 of
 the
 users
 from
 this
 um


lovable
 app
 that
 was
 very
 popular
 a


couple
 weeks
 ago.
 It
 says
 chat
 burn
 and


finish.
 So
 it's
 supposed
 to
 destroy
 all


the
 messages
 that
 you
 send,
 but
 it


actually
 didn't.
 Uh
 you
 can
 see
 like


people
 are
 saying
 all
 this
 weird
 stuff


like
 on
 the
 website
 that
 they're
 not


supposed
 to
 be
 exposed.
 So
 yeah,
 and


then
 we
 also
 built
 like
 a
 share
 page
 to


help
 people
 share
 this
 with
 um
 like


other
 friends.
 You
 see
 like
 we
 run
 some


examples
 there.
 So
 that's
 the
 example
 uh


that's
 what
 over
 easy
 looks
 like
 for
 the


um
 for
 our
 demo
 there.


And
 now
 we
 can
 I
 guess
 um
 do
 you
 have


any
 questions
 for
 the
 demo
 where
 I
 can


talk
 a
 little
 bit
 more
 on
 like
 what
 are


hackathons?


>> Let's
 talk
 about
 uh
 continue.
 I'll


interrupt
 to
 you
 if
 you
 have


>> question.
 Sounds
 good.
 So
 I
 know
 um
 many


people
 like
 you
 must
 have
 heard
 about


hackathons.
 That's
 why
 you
 sign
 up
 for


this
 um
 class
 and
 then
 you
 think
 it's


very
 interesting
 but
 maybe
 not
 a
 lot
 of


people
 have
 been
 to
 hackathons.
 So
 um
 I


will
 introduce
 a
 little
 bit
 like
 what


hackathons
 are.
 Um
 so
 it's
 actually
 a


very
 interesting
 term
 like
 hack
 plus


marathon.
 I
 believe
 it's
 born
 out
 of


some
 internal
 events
 in
 Yahoo
 where
 like


all
 the
 engineers
 get
 together
 like


spend
 a
 lot
 of
 time
 non
 break
 to
 build


some
 very
 challenging
 engineering
 task


and
 as
 time
 went
 by
 it
 evolves
 into
 an


event.
 Um
 in
 the
 early
 days
 it
 was


mostly
 for
 students
 and
 they
 would
 go
 to


this
 event
 build
 some
 project
 on
 the


spot
 maybe
 like
 48
 hours
 non-stop
 and


then
 uh
 the
 judges
 will
 compete
 the


final
 results
 on
 like
 which
 project
 is


the
 best
 and
 then
 after
 a
 few
 years
 like


maybe
 since
 2023


when
 CHP
 gets
 like
 really
 popular
 um


there
 are
 a
 lot
 of
 AI
 tools
 that's
 like


born
 out
 of
 nowhere


there
 are
 a
 lot
 of
 companies
 start


sponsoring
 more
 hackathons
 to
 try
 to


encourage
 people
 build
 and
 try
 different


AI
 tools.
 That's
 why
 I
 would
 say
 like


after
 Tai
 GBD
 gets
 popular,
 we
 see
 more


and
 more
 of
 this
 hackathons
 and
 it's


also
 changed
 a
 little
 bit
 from
 like
 in


the
 past
 it's
 more
 focused
 on


engineering
 skill
 set
 more
 for
 students


and
 now
 it's
 like
 more
 working
 people


are
 participating
 in
 hackathons
 and
 it's


not
 that
 um
 engineering
 focused
 anymore.


Um
 yeah
 so
 which
 means
 like
 there's
 a


lot
 of
 vibe
 coding
 things
 you
 don't
 have


to
 really
 know
 a
 lot
 of
 coding
 to


participate
 in
 hackathons
 and
 usually


the
 way
 hackathon
 works
 is
 that
 um
 there


will
 be
 a
 like
 a
 host
 um
 there
 will
 be
 a


theme
 and
 then
 there
 will
 be
 a
 lot
 of


sponsors
 the
 uh
 the
 sponsors
 will
 like


put
 in
 money
 putting
 price
 and
 uh
 there


are
 some
 requirements
 whether
 you
 have


to
 use
 their
 tools
 or
 not
 and
 then
 for


participants
 And
 uh
 people
 go
 in
 teams


or
 you
 can
 go
 in
 solo
 and
 they
 have
 to


build
 something
 in
 within
 like
 a
 certain


time.
 It's
 usually
 like
 five
 to
 seven


hours
 for
 a
 short
 one.
 Some
 of
 the


hackathons
 can
 go
 like
 overnights
 like


two
 days
 or
 even
 3
 days.
 So
 I'm
 talking


mostly
 about
 in-person
 hackathons.
 Um


yeah
 like
 virtual
 hackathons
 is
 like


another
 thing.
 It's
 more
 like
 just
 like


competition.
 So
 in
 person
 hackathons


it's
 usually
 like
 people
 go
 in
 teams


build
 something
 within
 certain
 time


periods
 and
 you
 submit
 your
 project
 and


the
 judges
 and
 the
 sponsors
 will
 judge


that
 like
 on
 the
 spot
 and
 then
 reveal


the
 results.
 Who
 are
 the
 winner?
 Um
 what


are
 the
 winners
 of
 different
 tracks
 and


that's
 like
 usually
 the
 event.


Yeah.
 Um,


so


I'm
 gonna
 next
 I'm
 going
 to
 talk
 about


like
 the
 I'm
 gonna
 go
 dive
 into
 the
 like


everything
 that
 people
 are
 most


interested
 about
 which
 is
 like
 the
 five


key
 principles
 that
 I
 personally
 find


very
 useful
 with
 like
 all
 the
 hackathons


that
 I
 go
 to.


So
 um
 I
 see
 hackathons
 like
 the
 backbone


of
 a
 good
 hackathon
 project
 is
 just
 idea


plus
 execution.
 So
 the
 first
 principle


is
 about
 how
 to
 what
 is
 a
 good
 idea
 and


how
 to
 get
 there.
 So
 people
 keep
 saying


things
 like
 oh
 this
 is
 really
 cool
 this


is
 like
 such
 a
 cool
 project.
 So
 what
 are


the
 aspects
 of
 that
 makes
 a
 cool


project?
 Um
 I
 think
 there
 are
 two
 aspect


of
 that's
 making
 an
 idea
 really
 good.


One
 is
 how
 useful
 it
 is.
 You
 can
 if
 you


can
 make
 the
 judges
 or
 the
 audience
 look


at
 this
 and
 their
 eyes
 light
 up
 and
 they


say
 oh
 that's
 something
 I
 will
 use
 that


actually
 solves
 my
 problem
 that's
 a
 very


good
 standard
 of
 useful
 and
 the
 other


aspect
 is
 about
 how
 different
 it
 is
 like


how
 innovative
 it
 is.
 Did
 it
 did
 it
 use


something
 new?
 Did
 it
 use
 some
 tools
 in


a
 very
 like
 in
 a
 way
 that
 no
 one
 has


used
 it
 before?
 Is
 it
 like
 um


realization
 of
 a
 philosophical
 ideas


that
 people
 thought
 about
 it
 but
 no
 one


has
 actually
 built
 it?
 So
 our
 project


showya
 was
 a
 good
 example.
 It
 was
 not


very
 useful.
 It
 was
 using
 LM
 as
 complete


interpreter.
 Um
 so
 there's
 no
 code.
 You


use
 LM
 to
 understand
 every
 interaction


the
 user
 did.
 So
 it's
 a
 highly


philosophical
 experiment
 that
 we
 did.
 A


lot
 of
 people
 have
 similar
 ideas
 but
 no


one
 has
 ever
 built
 it.
 So
 when
 people
 go


to
 hackathons
 they
 see
 this
 project
 they


really
 like
 it.
 But
 it's
 not
 very
 useful


because
 every
 time
 you
 click
 on
 the


application
 it
 takes
 almost
 like
 one


minute
 um
 to
 react
 and
 do
 something.
 And


on
 the
 contrary,
 the
 over
 easy
 hacking


agent
 that
 you
 just
 see
 is
 a
 very
 useful


one
 because
 everyone
 is
 vibe
 coding
 the


website.
 No
 one
 really
 knows
 how
 secure


they
 are.
 So
 that's
 something
 when
 we


show
 the
 demo,
 everyone
 is
 like,
 "Oh,


that's
 such
 an
 interesting
 project.
 You


should
 open
 it
 to
 public.
 Um,
 like
 I
 bet


like
 my
 company
 will
 use
 it.
 Like
 I


really
 need
 it."
 So
 there's
 like
 a
 two


elements
 of
 a
 cool
 idea.
 I
 would
 say


like
 in
 different
 hackathons
 people


might
 focus
 on
 different
 things
 like


sometimes
 you
 might
 find
 the
 judges
 and


audience
 like
 the
 practical
 aspect
 of


the
 idea
 more
 sometimes
 people
 are
 just


looking
 for
 like
 really
 cool
 things


they've
 never
 seen
 before.
 So,
 it's
 a


little
 bit
 of
 a
 art
 and
 balance
 of
 like


how
 do
 you
 want
 to
 balance
 this
 two


things
 and
 there's
 also
 like
 some


randomness
 like
 you
 never
 really
 know


what
 a
 judge
 is
 like
 and
 you
 might
 never


know
 what
 kind
 of
 good
 network
 it
 will


get
 you
 by
 doing
 different
 ideas.
 So,


how
 to
 get
 a
 good
 idea?
 It's
 not
 I
 would


say
 like
 it's
 not
 easy.
 Um
 I
 a
 lot
 of


times
 but
 my
 personal
 experiences


brainstorming
 ideas
 on
 the
 spot
 doesn't


really
 quite
 work.
 So
 usually
 all
 the


ideas
 that's
 been
 working
 really
 well


for
 us
 are
 the
 ideas
 we've
 been
 thinking


a
 lot.
 For
 example,
 over
 easy
 is
 born


out
 of
 the
 idea
 that
 was
 helping
 with
 my


friend's
 um
 bibec
 coding
 agent
 and
 we're


comparing
 the
 security
 level
 of
 all
 this


different
 bi
 coding
 tool
 platform
 like


base
 44
 lovable
 replet
 agent
 and
 then
 we


found
 so
 many
 loopholes
 by
 manually


doing
 things
 then
 I
 was
 like
 oh
 can
 we


just
 build
 some
 agent
 that
 will
 help
 us


to
 test
 the
 security
 of
 all
 this
 um


websites
 so
 I
 don't
 have
 to
 manually
 do


it
 and
 Then
 everyone
 really
 likes
 the


idea.
 So
 we
 decided
 to
 build
 it
 out
 at
 a


as
 a
 hackathon
 project.
 And
 the
 other


one
 like
 the
 showya
 the
 philosophical


LMS
 interpreter
 idea
 is
 also
 something


my
 friend
 has
 been
 passionate.
 I've
 been


thinking
 about
 it
 for
 weeks
 and
 so
 he


really
 wants
 to
 try
 to
 build
 it
 out
 in
 a


hackathon.
 So
 it's
 I
 would
 say
 it
 boils


down
 to
 it's
 something
 that
 you


experience
 daily
 and
 then
 you're
 trying


to
 solve
 your
 problem
 like
 a
 daily


problem
 you've
 been
 experiencing
 it


thinking
 about
 it
 for
 a
 while
 or


something
 you're
 very
 obsessed
 or


passionate
 about
 like
 you
 really
 want
 to


try
 and
 build
 it.
 Usually
 those
 ideas


work
 pretty
 well.
 So
 but
 not
 like
 we


don't
 really
 have
 those
 ideas
 all
 the


time.
 like
 what
 if
 you
 just
 don't
 have


those
 ideas?
 One
 way
 if
 you
 like
 if
 you


don't
 go
 with
 ideas
 is
 totally
 fine
 too.


Um
 when
 you're
 teaming
 up
 with
 people


and
 you're
 like
 brainstorming,
 one
 very


useful
 angle
 is
 to
 try
 to
 dig
 into
 their


experience
 and
 ask
 questions
 about
 or
 do


you
 have
 all
 this
 like
 everyday
 problems


that
 you
 want
 to
 solve
 or
 do
 you
 have


this
 thing
 that
 you're
 very
 obsessed
 or


passionate
 about?
 Can
 we
 build
 something


for
 for
 those
 two
 things?
 So,
 it's
 like


digging
 into
 your
 teammates's
 personal


experience.
 So,
 we
 we
 saw
 a
 project
 that


was
 doing
 really
 well,
 which
 is
 um
 they


have
 like
 a
 community
 school
 like
 a
 like


I
 forgot
 what
 she
 works
 for,
 but
 she


works
 for
 a
 community
 school.
 So,
 she


keeps
 seeing
 all
 these
 people
 suffering


from
 like
 not
 being
 able
 to
 um
 pick
 the


courses
 in
 community
 school.
 So
 they


built
 a
 little
 tool
 to
 help
 her
 students


to
 better
 do
 that.
 It's
 not
 something


that
 we
 usually
 experience
 every
 day,


but
 it's
 like
 her
 everyday
 life
 and
 she


is
 like
 very
 passionate
 about
 this


topic.
 She
 knows
 all
 the
 user
 problem


and
 their
 project
 end
 up
 doing
 pretty


well.
 So
 that's
 how
 you
 can
 get
 the
 good


idea
 either
 from
 your
 own
 personal


experience
 or
 dig
 into
 other
 people's


personal
 experience.


Yeah.
 And
 then
 um
 the
 next
 part
 um
 is


about
 execution.
 I
 talk
 about
 hackathon


is
 about
 idea
 plus
 execution.
 You
 if
 you


have
 a
 really
 good
 idea
 but
 you
 can't


really
 build
 anything.
 That's
 not
 the


point
 of
 hackathon.
 The
 hackathon
 is
 a


little
 bit
 like
 a
 because
 it's
 like
 a


marathon.
 It's
 a
 little
 bit
 like
 a


sports.
 But
 something
 different
 is
 like


for
 other
 sports
 you
 do
 the
 practice


like
 like
 everything
 happened
 um
 before


that
 competition
 but
 for
 hackathon
 a
 lot


of
 things
 will
 have
 to
 happen
 on
 the


spot.
 It's
 like
 um
 like
 a
 building


thing.
 So
 you
 have
 to
 show
 something.


It's
 one
 funny
 example
 is
 that
 in
 one
 of


the
 um
 the
 hackathon
 final
 presentation


there's
 a
 team
 doing
 something
 really


cool
 but
 they
 don't
 actually
 have


anything
 that
 they
 can
 demo.
 there's
 no


visual,
 no
 demo,
 like
 nothing
 at
 all.


They
 just
 have
 like
 this
 idea
 and
 this


backend
 API
 that's
 kind
 of
 working.
 So


like
 even
 if
 the
 idea
 is
 really
 good,


the
 judges
 just
 like
 can't
 really
 give


them
 a
 very
 high
 score
 or
 like
 a
 good


result
 because
 that's
 not
 really


presentable.


So
 one
 strategy
 that
 I
 find
 really


helpful
 is
 to
 always
 think
 about
 the


demo.
 Like
 think
 about
 what
 do
 you
 want


to
 show
 to
 people?
 Like
 everyone


understands
 six
 or
 seven
 hours
 even
 two


days
 are
 not
 enough
 to
 build
 a


completely
 working
 product
 and
 so
 it's


important
 to
 pick
 and
 choose
 your
 battle


like
 how
 do
 you
 want
 to
 show
 this
 thing?


What
 should
 this
 threeinut
 demo
 look


like?
 Um
 after
 the
 user
 log
 in
 what


should
 the
 user
 do
 and
 how
 do
 you
 want


to
 like
 tell
 the
 story
 and
 emphasize


your
 point.
 Um,
 for
 example,
 in
 the
 over


easy
 demo,
 we
 like
 we
 when
 we
 thought


about
 the
 what
 should
 the
 demo
 look
 like


with
 we
 think
 that
 it
 should
 expose
 the


vulnerabilities
 of
 the
 website
 that
 it's


able
 to
 find.
 So,
 it's
 just
 as
 simple
 as


that
 because
 you
 can
 have
 all
 kinds
 of


different
 approaches
 to
 do
 a
 little


hacking
 agent.
 But
 by
 think
 aligning
 on


what
 a
 demo
 should
 look
 like,
 everyone


is
 more
 targeted
 on,
 oh,
 do
 we
 need
 this


front
 end?
 Do
 we
 need
 this
 page?
 Do
 we


need
 this
 API?
 Then
 like
 everything
 is


for
 that
 demo
 because
 in
 the
 end,
 even


if
 the
 product
 didn't
 quite
 work
 by
 the


end,
 if
 the
 demo
 works,
 it's
 like
 a


working
 product
 to
 everyone.
 Yeah.
 And


yeah,
 that's
 like
 the
 execution
 part.
 So


the
 idea
 and
 the
 execution
 is
 like
 what


makes
 a
 successful
 hackathon
 project.
 I


personally
 don't
 really
 like
 slides
 for


final
 presentation.
 I
 don't
 think
 I
 ever


made
 any
 deck
 for
 final
 presentation.


I'm
 always
 just
 go
 in
 with
 um
 a
 demo.


>> But
 you
 kind
 of
 stage
 the
 live
 demo,


right?
 Yes.


>> Yes,
 we
 we
 definitely
 staged
 a
 little


bit
 the
 demo
 like
 in
 like
 something


might
 not
 work.
 So
 you
 practice
 the
 demo


to
 make
 sure
 like
 the
 dummy
 data
 works,


the
 flow
 works.
 It's
 it
 should
 be
 like
 a


kind
 of
 like
 a
 performance
 of
 how
 the


idea
 should
 look
 like.
 Yeah.


>> Nice.


>> Yep.
 Um
 so
 the
 the
 third
 point
 is
 like


how
 to
 how
 do
 we
 make
 that
 idea
 plus


execution
 combo
 work?
 So
 a
 lot
 of
 people


ask
 me
 how
 do
 they
 find
 a
 teammate?
 Um,


like
 I
 have
 the
 privilege
 of
 knowing
 a


lot
 of
 really
 good
 people.
 Like
 they're


my
 friends
 and
 I
 see
 hackathon
 as
 a
 way


like
 I
 also
 I
 personally
 really
 like


hang
 out
 with
 my
 friends
 by
 building


projects.
 So
 it
 just
 happened
 to
 be
 a


way
 that
 I
 hang
 out
 with
 all
 the
 all
 the


people
 and
 the
 way
 I
 make
 new
 friends
 is


also
 I
 will
 ask
 oh
 do
 you
 want
 to
 do
 a


hackathon
 together?
 And
 so
 yeah,
 like
 um


I
 would
 say
 it's
 like
 very
 interesting


to
 do
 projects
 with
 your
 friends.
 You


learn
 a
 lot.
 Like
 you
 also
 go
 through
 a


lot
 of
 things.
 I
 really
 like
 it.
 But
 if


you
 don't
 really
 have
 friends
 in
 real


life
 that
 you
 can
 do
 it
 and
 you
 kind
 of


have
 to
 find
 them
 on
 the
 spot,
 it's


always
 like
 um
 like
 a
 crapshoot.
 Like


you
 don't
 you
 don't
 really
 know
 what


kind
 of
 people
 you
 would
 get.
 Um,
 so


like
 like
 it's
 just
 like
 hard
 to
 always


get
 the
 best
 people
 on
 the
 spot.
 I
 would


if
 you
 want
 to
 win
 the
 hackathon,
 I


would
 suggest
 like
 going
 people
 you
 kind


of
 know
 already,
 especially
 like
 uh


people
 should
 have
 different
 skill
 sets.


I'm
 actually
 not
 um
 believer
 of
 like


huge
 team
 like
 in
 all
 the
 winning


hackathons
 our
 team
 usually
 just
 have


like
 two
 people
 like
 me
 and
 plus
 my


engineering
 friend.
 So
 my
 friend
 will


work
 on
 all
 the
 engineering
 stuff
 and
 I


will
 work
 on
 all
 the
 non-engineering


stuff
 including
 um
 like
 like
 all
 the


design
 you
 see
 like
 the
 egg
 thing
 like


the
 animation
 there's
 also
 a
 lot
 of


logistics
 there's
 like
 a
 lot
 of
 design


how
 do
 we
 face
 the
 demo
 and
 including


some
 networking
 with
 people
 and
 judges


um
 so
 I
 got
 a
 lot
 of
 questions
 about


people
 asking
 me
 oh
 I'm
 non-technical


like
 what
 should
 I
 do
 in
 a
 hack


hackathon
 like
 is
 that
 for
 me
 like
 if
 I


don't
 know
 how
 to
 code
 can
 I
 go
 um
 the


like
 the
 answer
 is
 for
 sure
 especially


when
 AI
 is
 so
 popular
 you
 don't
 really


need
 to
 know
 how
 to
 code
 to
 participate


in
 a
 hackathon
 in
 fact
 I
 think
 a
 team
 I


don't
 think
 a
 team
 can
 like
 at least
 for


my
 personal
 uh
 opinion
 I
 don't
 know
 how


well
 if
 two
 engineers
 are
 working
 on
 the


same
 team
 I
 usually
 talk
 to
 people
 um
 a


A
 lot
 of
 the
 frustration
 is
 that
 when


you
 have
 two
 engineering
 two
 engineer


work
 on
 the
 same
 codebase
 you
 spend
 the


majority
 of
 your
 time
 resolving
 merging


conflict
 and
 especially
 when
 time
 is
 so


tight
 like
 if
 like
 any
 little
 thing


doesn't
 work
 you
 spend
 too
 much
 time
 on


like
 communicating.
 So
 if
 you
 have
 one


really
 good
 engineer
 that
 usually
 works


way
 better
 than
 if
 you
 have
 like
 two


engineer
 try
 to
 work
 with
 each
 other


unless
 you
 can
 divide
 and
 conquer
 the


stuff
 really
 really
 well.
 So
 to
 make


sure
 you
 can
 maximize
 everyone's


productivity
 but
 for
 non-engineering


people
 it's
 actually
 a
 lot
 easier
 like


there
 are
 like
 so
 many
 things
 you
 can
 do


um
 like
 people
 can
 think
 about
 the
 demo


idea
 the
 user
 journey
 you
 can
 do
 design


you
 can
 do
 like
 different
 art
 asset
 on


the
 part
 uh
 you
 can
 talk
 to
 people
 you


can
 even
 like
 interview
 other
 people
 on


the
 hackathon
 to
 get
 some
 user
 feedback


interview
 the
 judges
 But
 in
 the
 end
 I
 I


think
 an
 ideal
 size
 is
 maybe
 like
 two
 to


three
 people.
 Uh
 because
 the
 more
 people


you
 have
 the
 more
 you
 need
 to
 put
 in


like
 communication
 and
 dividing
 up
 the


work.
 So
 it's
 not
 always
 like
 the
 more


people
 the
 better
 but
 of
 course
 the
 more


people
 you
 have
 you
 can
 have
 like
 spread


them
 out
 in
 different
 area
 depending
 on


how
 complicated
 your
 project
 is.
 But
 I


think
 the
 it
 boils
 down
 to
 like
 if
 you


are
 non-technical
 like
 it's
 totally
 fine


like
 it's
 very
 fun
 to
 go
 into
 the


hackathon
 because
 you
 actually
 get
 to


have
 more
 fun
 meeting
 new
 people
 and


engineering
 when
 engineering
 has
 to
 like


always
 like
 heads
 down
 coding
 you
 can


actually
 like
 do
 a
 lot
 of
 more
 stuff.


Um
 yeah
 so
 I
 talk
 a
 little
 bit
 about


networking.
 Um
 so
 like
 networking


hackathon
 I
 think
 it's
 not
 a
 topic
 that


people
 like
 talk
 about
 a
 lot
 but
 I
 find


it
 like
 very
 very
 useful
 uh
 both
 for
 my


personal
 goal
 which
 is
 to
 make
 more


friends
 and
 like
 discover
 more


interesting
 stuff
 happening
 in
 life
 and


it's
 also
 about
 winning
 the
 hackathon.


So
 for
 some
 so
 more
 let's
 be
 more


utilitarian
 if
 you
 want
 to
 wing
 the
 um


hackathon
 it's
 more
 like
 the
 judges
 will


have
 the
 final
 say
 in
 in
 your
 final


project
 and
 if
 the
 judges
 don't
 get
 a


lot
 of
 time
 like
 they
 don't
 like
 there


are
 so
 many
 project
 the
 over
 easy
 one


had
 like
 100
 I
 think
 the
 YC
 one
 always


have
 maybe
 like
 200
 projects
 at
 the
 same


time
 the
 judges
 just
 don't
 get
 that
 much


time
 understanding
 your
 project
 or
 Like


maybe
 you
 have
 a
 lot
 of
 really
 great


ideas,
 but
 it's
 just
 hard
 to
 say


everything
 in
 the
 3
 minutes
 demo
 and


what
 if
 your
 demo
 doesn't
 work?
 So,


there's
 a
 lot
 of
 things
 going
 on.
 If
 you


can
 get
 any
 time
 talking
 to
 the
 judges


during
 the
 hackathon
 um
 get
 their


feedback
 on
 your
 project,
 get
 their


advice
 like
 it's
 it's
 a
 great
 way
 to


kind
 of
 get
 more
 um
 exposure
 for


yourself
 and
 also
 for
 the
 judges
 to


understand
 your
 project
 more
 in
 case


India
 maybe
 they
 don't
 even
 get
 to
 see


your
 project
 in
 the
 final
 judging


because
 they
 always
 like
 spread
 it
 out.


Sorry
 question
 like
 are
 they
 at
 the


hackathon
 or
 do
 they
 just
 come
 at
 the


end
 to
 uh
 to
 the
 judge
 and
 are
 they


allowed
 to
 talk
 to
 participants?


>> Yeah.
 So
 um
 for
 all
 the
 hackathons
 I


went
 to
 only
 one
 very
 weird
 structured


hackathon
 said
 oh
 we
 don't
 want
 you
 to


talk
 to
 the
 judge
 because
 it's
 not
 fair.


But
 most
 of
 the
 time
 the
 sponsors
 and


judges
 uh
 especially
 the
 sponsors
 which


are
 also
 the
 judges
 at
 the
 same
 time


they
 are
 there
 to
 talk
 to
 all
 the


participants.
 So
 um
 in
 that
 case
 like


everyone
 is
 encouraged
 to
 talk
 to
 them


to
 learn
 about
 their
 company
 to
 ask


questions
 about
 how
 to
 use
 their
 company


tool
 in
 your
 project.
 So
 I
 would
 say


like
 it's
 mostly
 encouraged
 to
 talk
 to


them
 and
 um
 yeah
 that's
 for
 like


utilitarian
 reason
 and
 but
 another
 thing


I
 also
 find
 it's
 just
 like
 very


interesting
 to
 talk
 to
 them.
 You
 can


talk
 to
 judges
 and
 sponsors.
 You
 can


talk
 to
 your
 fellow
 other
 hackers.
 Maybe


when
 you're
 getting
 food,
 when
 you're


getting
 drinks,
 just
 asking,
 "Oh,
 what


are
 you
 building
 here?"
 Um,
 like
 you


will
 miss
 I
 met
 a
 lot
 of
 my
 really
 good


friends
 during
 hackathon.
 And
 it's
 like


it's
 very
 hard
 to
 meet
 new
 friends.
 I


will
 say
 like
 these
 days
 and
 you
 don't


really
 have
 you
 don't
 always
 have


something
 like
 interesting
 you
 can
 talk


about.
 But
 in
 hackathon,
 everyone
 is


here
 to
 try
 to
 build
 something.
 Everyone


is
 willing
 to
 talk
 about
 what
 I'm
 here


for,
 what
 I'm
 building,
 what
 do
 I
 work


on
 when
 I'm
 not
 doing
 hackathon.
 So,


people
 are
 more
 open-minded
 to
 make
 new


friends.
 So,
 yeah,
 it's
 like
 a
 great


opportunity
 to
 just
 meet
 a
 lot
 of


friends.


>> It's
 like
 new
 student
 orientation.


>> Yes.
 Yes.
 Yeah.
 Totally.
 And
 people
 that


are
 doing
 hackathons
 are
 kind
 of
 like


that
 too.
 They
 also
 want
 to
 meet
 new


friends.
 I
 would
 say
 most
 people
 do.


Yeah.


Yep.
 So
 that's
 networking.
 Um,
 so
 the


last
 point
 is
 about
 like
 how
 to
 deal


with
 not
 waiting.
 I
 think
 it's
 also
 the


like
 it's
 it's
 a
 cliche
 but
 it's
 like


one
 of
 the
 most
 important
 thing
 for


doing
 hackathons
 because
 if
 you
 cannot


deal
 with
 not
 winning
 it's
 actually
 very


hard
 to
 start
 doing
 hackathons
 and
 then


or
 like
 to
 keep
 doing
 hackathons.
 I


think
 I
 it's
 like
 I
 also
 learned
 this


through
 like
 all
 my
 experiences
 of
 doing


other
 hackathons
 that
 didn't
 really
 win


end
 up
 winning.
 Um
 I
 I
 think
 for
 myself


one
 of
 the
 biggest
 learning
 that
 I
 know


is
 that
 like
 a
 lot
 of
 the
 things
 I
 would


I'm
 doing
 is
 not
 going
 to
 work
 and
 I


have
 to
 know
 that
 like
 I
 have
 to
 be
 okay


with
 things
 not
 working.
 And
 so
 when
 I


first
 start
 doing
 hackathon,
 if
 I
 didn't


win,
 I
 would
 feel
 really
 bad.
 I
 feel


like,
 oh,
 I'm
 not
 good.
 I'm
 not
 as
 good


as
 other
 people.
 But
 as
 I
 do
 more,
 I


realized
 there's
 such
 a
 randomness
 in


all
 these
 hackathons.
 Maybe
 someone,
 for


example,
 I
 talked
 about
 our
 highly


philosophical
 LMS
 interpreter
 project,


Showya.
 I
 really
 like
 that
 project
 but


that
 project
 only
 got
 the
 third
 place
 in


the
 first
 uh
 YC
 hackathon.
 I
 think


because
 that
 YC
 partner
 didn't
 like
 the


idea.
 She
 wants
 more
 practical
 idea
 that


she
 can
 actually
 invest
 or
 she
 would


use.
 But
 we
 got
 such
 good
 network
 result


out
 of
 that
 project
 because
 the
 word


where
 people
 really
 like
 it.
 it
 aligns


with
 their
 philosophy.
 And
 yeah,
 like
 it


just
 like
 it's
 like
 it's
 a
 lot
 of


randomness.
 Like
 if
 you
 didn't
 win,
 it


doesn't
 really
 mean
 your
 project
 is
 not


good.
 It
 could
 just
 be
 like
 the
 judges


that
 would
 have
 liked
 your
 project
 a
 lot


more
 didn't
 get
 to
 see
 it.
 And
 the
 fun


is
 in
 the
 entire
 process
 of
 like
 doing


it
 with
 friends,
 meeting
 new
 people,


testing
 out
 different
 ideas,
 and
 not


winning.
 it's
 just
 like
 one
 result
 um
 of


out
 of
 that
 and
 I
 I
 also
 learned
 how
 to


deal
 with
 like
 the
 failures
 before
 I


will
 think
 like
 every
 failure
 is
 like
 a


it's
 like
 a
 like
 a
 smear
 on
 my
 very


pretty
 journey
 like
 my
 journey
 should
 be


perfect
 like
 everything
 should
 look


great
 but
 then
 as
 I
 fail
 more
 and
 more
 I


I
 cherish
 all
 these
 failures
 even
 more
 I


feel
 like
 if
 I
 fail
 that
 means
 I'm
 like


trying
 hard
 enough.
 That's
 my
 way
 of


feeling
 more
 secure
 with
 my
 life.
 If
 I


don't
 fail
 enough,
 I
 actually
 feel
 a


little
 bit
 uncomfortable.
 That
 means
 I'm


not
 trying
 enough
 things.
 I'm
 not


actually
 reaching
 my
 full
 potential.
 So,


every
 little
 failure
 is
 not
 that


negative
 anymore.
 And
 that
 actually
 also


um
 like
 that's
 something
 that
 keeps


motivating
 me
 to
 go
 to
 hackathon.
 Of


course,
 I'm
 not
 waiting
 everyone.
 If
 I


get
 really
 discouraged
 from
 not
 winning


one
 of
 them,
 it's
 very
 hard
 to
 keep


going.
 Yeah.
 So,
 yeah,
 I
 think
 that's


the
 five
 key
 principles
 I
 have
 for
 going


to
 hackathons.


>> Nice.
 Thank
 you.
 And
 uh
 let's
 go
 to


question
 and
 answers.
 I
 think
 you


actually
 answer
 a
 lot
 of
 questions
 in


chat.
 For
 example,
 how
 to
 recruit
 a
 team


like
 how
 to
 distribute
 work
 and
 what


motivates
 you
 to
 join
 hackathon,
 right?


You
 just
 mentioned
 all
 of
 that.
 I
 think


one
 question
 from
 Shai
 is
 uh
 uh
 like
 how


to
 balance
 ideas
 like
 do
 you
 have
 to


kind
 of
 please
 the
 judge?
 Do
 you
 go
 do


you
 have
 to
 sacrifice
 usefulness
 in


order
 for
 like
 uh
 ideas
 that
 attract


more
 attention?
 Like
 do
 you
 think
 like


have
 you
 ever
 abandoned
 an
 idea
 that
 you


feel
 like
 is
 useful
 but
 may
 not
 win
 a


hackathon?


>> Yeah,
 like
 I
 would
 say
 that's
 a
 very


good
 problem
 to
 have.
 If
 you
 have
 to


like
 balance
 between
 ideas,
 that
 means


you
 have
 many
 many
 good
 ideas.
 Um
 I
 like


it's
 not
 a
 very
 common
 problem
 to
 me,


but
 I
 have
 a
 little
 list
 of
 whenever
 I


think
 about
 something
 that
 could
 be
 a


good
 hackathon
 project,
 I
 put
 that
 in
 in


the
 little
 list.
 But
 um
 I
 also
 have
 this


discussion
 with
 my
 friend
 like
 which


idea
 we
 should
 do.
 I
 find
 the
 most


rewarding
 thing
 is
 always
 to
 do


something
 that
 you
 really
 want
 to
 build.


Um
 if
 because
 in
 the
 end
 if
 we
 talk


about
 like
 how
 random
 it
 is
 to
 win
 the


hackathon
 if
 and
 it's
 always
 like
 if
 you


want
 to
 build
 if
 you
 build
 something
 you


think
 people
 will
 like
 it
 then
 it
 should


be
 something
 you
 really
 want
 to
 build


too.
 If
 it
 it's
 not
 the
 thing
 that
 you


really
 want,
 it's
 hard
 to
 assume
 that


other
 people
 will
 really
 want
 that.
 And


in
 the
 end,
 if
 it
 doesn't
 wing,
 if
 it's


something
 that
 you
 really
 want
 to
 do,


you
 will
 not
 feel
 like
 it's
 a
 waste
 of


time
 too.
 Yeah.
 Like
 I
 would
 say
 just


build
 something
 that's
 like
 very
 close


to
 your
 heart
 and
 you
 are
 very


passionate
 about
 is
 the
 most
 important


thing
 and
 that
 that
 is
 usually
 a
 very


good
 project
 and
 that
 will
 like
 touch
 a


lot
 of
 people
 too


>> or
 at
 least
 if
 you
 try
 to
 just
 please


the
 judge
 you
 get
 nothing
 right
 often


that
 you
 don't
 win
 that
 way.


>> Yeah.
 Like
 you
 should
 please
 yourself


and
 the
 judge.
 If
 something
 that
 you


think
 will
 please
 the
 judge
 but
 it


doesn't
 really
 please
 you.
 doubt
 that


will
 actually
 please
 the
 judges
 too.


>> Cool.
 Uh
 a
 question
 from
 Balo.
 How
 many


times
 have
 you
 tried
 and
 what
 is
 the


first
 win
 looks
 like
 for
 you?
 I
 guess


how
 many
 times
 you
 tried
 before
 you


winning
 the
 first
 hackathon?


>> Um
 I
 think
 I
 got
 very
 lucky.
 Um
 the
 my


first
 hackathon
 like
 I
 win
 it's
 like
 a


crypto
 hackathon.
 They
 have
 a
 lot
 of
 um


cash
 reward.
 I
 won
 like
 16k
 out
 of
 that


hackathon
 with
 my
 friends.
 So
 that
 was
 I


was
 lucky.
 That
 was
 my
 first
 hackathon,


but
 after
 that
 I
 definitely
 went
 to
 some


hackathons
 I
 didn't
 win.
 Um
 like
 I
 was
 I


I
 forgot
 like
 how
 many
 times
 but
 there


are
 a
 lot
 of
 times
 I
 end
 up
 with
 nothing


and
 going
 back
 home.


>> Yeah.


>> How
 many
 hackathons
 have
 you
 been
 to?


>> I
 didn't
 really
 count
 but
 maybe
 around


like


10ish
 like
 12
 13.


>> I
 see.
 Uh
 one
 question
 from
 now
 and


maybe
 we
 can
 ask
 one
 more
 and
 then
 uh


close
 it.
 Uh
 so
 uh
 leave
 your
 question


uh
 in
 the
 chat
 if
 you
 want
 to.
 So
 the


question
 from
 now
 is
 uh
 what
 do
 you


think
 has
 contributed
 most
 to
 your
 win


wins
 in
 multiple
 hackathon?


>> I
 guess
 the
 question
 is
 like
 for
 any


single
 one
 is
 idea
 plus
 execution
 but
 if


you
 can
 win
 multiple
 one
 then
 what?


Yeah,
 I
 think
 it's
 like
 um
 I
 will
 say


because
 like
 it's
 a
 lot
 of
 factors


coming
 into
 play,
 but
 I
 think
 it's


because
 because
 execution
 is
 kind
 of
 a


given
 if
 you
 pick
 the
 right
 person
 like


you
 know
 how
 to
 work
 together.
 They
 have


like
 certain
 engineering
 skills.
 So


that's
 not
 really
 the
 factor
 for
 me.
 So


I
 would
 say
 um
 I
 think
 the
 most


important
 part
 part
 for
 my
 hackathon


wins
 are
 the
 ideas
 like
 if
 I
 pay
 a
 lot


of
 attention
 to
 the
 daily
 problems
 or


other
 people's
 daily
 problems
 I
 I
 often


end
 up
 with
 really
 good
 ideas
 and
 then


we
 can
 just
 um
 maneuver
 the
 demo
 to
 make


it
 look
 good
 and
 then
 in
 the
 end
 it's


like
 a
 good
 hackathon
 project.
 So
 I


think
 like
 observing
 what
 could
 be
 like


what
 could
 please
 everyone
 in
 everyday


life
 and
 turning
 into
 a
 hackathon


project
 is
 pretty
 important


>> I
 guess
 product
 sense.


>> Yeah.


>> Yeah.


>> So
 I
 love
 both
 questions
 that
 are
 coming


up
 but
 we
 can
 only
 pick
 one.
 So
 I'll
 let


you
 pick
 one.
 The
 first
 is
 during
 your


hackathon
 projects,
 have
 you
 ever


encountered
 an
 area
 of
 knowledge
 or


skill
 that
 you
 initially
 initially


lacked
 but
 realized
 was
 critical
 to
 our


goal?
 And
 then
 if
 so,
 how
 did
 you


quickly
 get
 up
 to
 speed
 and
 apply
 the


new
 knowledge?
 The
 second
 question
 is


after
 all
 the
 hackathons
 accumulated,
 do


you
 have
 a
 list
 of
 toolkits
 that
 you


leverage
 the
 most?


The
 first
 is
 how
 to
 overcome
 information


or
 knowledge
 gap.
 The
 second
 is
 the
 list


of
 tokus.


>> Um
 I
 think
 the
 first
 one
 is
 pretty


interesting
 because
 I
 definitely
 learned


a
 lot
 of
 things
 in
 the
 hackathon
 too.
 Um


and
 I
 think
 like
 learning
 by
 doing
 is


such
 a
 cliche
 but
 it's
 it's
 real.
 So
 um


because
 I
 I
 told
 you
 like
 my
 friend
 is


usually
 engineering
 and
 I'm
 responsible


for
 all
 the
 non-engineering
 stuff.
 I


need
 to
 learn
 like
 design
 like
 how
 to
 do


design,
 how
 to
 do
 product,
 how
 to
 do


user
 journey,
 like
 a
 lot
 of
 things.
 How


to
 network.
 Um
 I
 learned
 a
 lot
 of


different
 things
 when
 I'm
 doing
 it.
 I
 I


think
 okay
 I
 think
 the
 most
 useful
 thing


for
 me
 is
 just
 to
 talk
 to
 trigger
 or


like
 any
 AI.
 I
 think
 um
 Eugene
 you
 like


you
 and
 Yagu
 also
 had
 like
 a
 um
 episode


about
 how
 to
 ask
 HGBT
 how
 to


>> yeah
 for
 all
 these
 questions
 um
 it
 will


give
 you
 a
 very
 good
 even
 above
 average


answer
 for
 different
 things
 and
 then
 you


can
 keep
 building
 on
 top
 of
 that.
 So
 I


think
 a
 lot
 of
 things
 even
 like
 rocket


science
 you
 can
 learn
 it
 like
 step
 by


step
 a
 lot
 of
 things
 are
 not
 as


difficult
 as
 you
 will
 think.
 For


example,
 um
 I
 was
 I
 really
 wanted
 to
 do


a
 very
 cute
 animation
 of
 like
 the
 little


egg
 doing
 doing
 things
 and
 then
 but
 I'm


no
 I'm
 not
 a
 designer.
 I
 don't
 really


know
 how
 to
 do
 that.
 Then
 I
 started
 like


pulling
 random
 pictures
 and
 feed
 it
 into


CHBT
 and
 ask
 it
 to
 give
 me
 like
 cute
 egg


and
 I
 use
 a
 V3
 to
 build
 that
 video


animation
 and
 then
 sometimes
 it
 doesn't


work.
 So
 I
 try
 different
 things.
 I
 give


it
 like
 all
 the
 elements
 and
 ask
 it
 to


do
 a
 video
 or
 not
 giving
 anything
 like
 I


just
 try
 different
 things
 and
 you
 will


realize
 some
 some
 things
 are
 working.
 So


the
 good
 things
 with
 AI
 is
 that
 it
 has


so
 many
 information
 um
 in
 the
 LM
 that
 it


will
 give
 you
 average
 answer
 and
 the


tools
 also
 make
 everything
 way
 easier


than
 before.
 Like
 you
 don't
 really
 have


to
 be
 a
 designer
 to
 build
 something


that's
 very
 cute
 or
 you
 don't
 have
 to
 be


an
 animator
 to
 actually
 build
 a
 good


animation.


>> Cool.
 Let's
 go
 to
 the
 next
 slide
 and


I'll
 do
 my
 two
 minutes
 uh
 pitch.
 So
 a


lot
 of
 principles
 you
 just
 uh
 mentioned


like
 for
 example
 trying
 learning
 from


mistakes
 and
 asking
 the
 right
 question


uh
 iterate
 right
 those
 are
 the
 key


skills
 in
 the
 era
 of
 AI
 and
 how
 to


leverage
 the
 most
 out
 of
 these
 AI
 tools.


So
 our
 course
 build
 it
 with
 AI
 is
 kind


of
 on
 this
 principle
 I'll
 show
 you


what's
 possible
 with
 AI
 and
 how
 to
 get


there
 and
 not
 only
 through
 the
 success


the
 successful
 demos
 but
 also
 the
 guided


mistakes
 and
 we'll
 build
 things
 together


with
 a
 lot
 of
 prototype
 and
 then
 I'll


show
 you
 what
 works
 and
 how
 to
 get
 over


that
 then
 what
 doesn't
 work
 and
 then
 how


to
 unblock
 yourself
 and
 uh
 it's
 a
 very


hands-on
 course
 and
 we
 show
 you


principles
 as
 well
 like
 a
 lot
 of


principles
 holds
 true
 hold
 true
 like
 uh


uh
 during
 this
 uh
 rapid
 development
 of


AI
 which
 is
 not
 common
 like
 uh
 we
 teach


you
 principles
 from
 a
 year
 ago.
 This
 is


our
 10th
 cohort
 and
 if
 you
 look
 at
 our


first
 cohort
 uh
 for
 example
 we
 do
 not


teach
 RA
 and
 now
 it
 turns
 out
 RG
 is
 not


the
 best
 way
 to
 do
 things.
 Uh
 so
 that
 is


the
 course
 and
 our
 next
 cohort
 is


November
 3rd.
 I
 also
 dropped
 a
 link
 of


the
 community.
 So
 in
 the
 community
 you


can
 have
 discussions
 and
 ask
 lifetime
 uh


question
 questions
 Q&A
 uh
 we'll
 answer


our
 question
 if
 you
 uh
 register
 uh
 by


the
 course
 you'll
 get
 access
 to
 the


community
 but
 you
 can
 also
 get
 into
 the


community
 for
 free
 uh
 you
 just
 follow


the
 like
 we
 I
 I
 don't
 want
 to
 just
 say


you
 know
 how
 to
 get
 into
 the
 community


but
 there
 is
 a
 way
 to
 get
 into
 the


community
 for
 free
 and
 I
 invite
 Ry
 to


answer
 a
 question
 if
 you
 have
 question


for
 her
 like
 for
 example
 the
 kid
 uh
 that


uh
 she
 leveraged
 the
 most.
 All
 right,


thank
 you
 for
 coming
 to
 this
 uh


lettering
 course
 and
 uh
 have
 a
 happy


weekend.


>> Bye.


>> Thank
 you,
 Riley.


>> Thank
 you
 everyone.
 Bye.