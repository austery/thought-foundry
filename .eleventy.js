// 使用动态导入，所以主函数必须是 async
module.exports = async function (eleventyConfig) {
  const { default: slugify } = await import("@sindresorhus/slugify");
  const { pinyin } = await import("pinyin");

  // --- 过滤器 (Filters) ---
  eleventyConfig.addFilter("jsonify", function (value) {
    return JSON.stringify(value);
  });

  eleventyConfig.addFilter("slug", (str) => {
    if (!str) return;
    const trimmedStr = str.trim();
    const pinyinStr = pinyin(trimmedStr, { style: pinyin.STYLE_NORMAL }).join(
      " "
    );
    return slugify(pinyinStr);
  });

  // 添加一个过滤器来获取演讲者的唯一键
  eleventyConfig.addFilter(
    "getSpeakerUniqueKey",
    function (speakerName, collections) {
      if (!collections || !collections.speakerList)
        return slugify(
          pinyin(speakerName.trim().toLowerCase(), {
            style: pinyin.STYLE_NORMAL,
          }).join(" ")
        );

      const cleanedName = speakerName.replace(/^['"]|['"]$/g, "").trim();
      const lowerCaseName = cleanedName.toLowerCase();

      const speaker = collections.speakerList.find(
        (s) => s.key === lowerCaseName
      );
      return speaker ? speaker.uniqueKey : lowerCaseName;
    }
  );

  // --- 集合 (Collections) ---

  // 集合 1, 2, 3: 保持不变
  eleventyConfig.addCollection("posts", function (collectionApi) {
    return collectionApi.getFilteredByGlob("./src/posts/**/*.md");
  });
  eleventyConfig.addCollection("books", function (collectionApi) {
    return collectionApi.getFilteredByGlob("./src/books/**/*.md");
  });
  eleventyConfig.addCollection("notes", function (collectionApi) {
    return collectionApi.getFilteredByGlob("./src/notes/**/*.md");
  });

  // 集合 4: 这是我们最终的、最可靠的标签集合，现在增加了更强大的调试报告功能
  eleventyConfig.addCollection("tagList", (collectionApi) => {
    const tagMap = new Map();
    collectionApi.getAll().forEach((item) => {
      // 我们只处理那些在 posts, books, 或 notes 文件夹里的内容
      if (
        item.inputPath.includes("./src/posts/") ||
        item.inputPath.includes("./src/books/") ||
        item.inputPath.includes("./src/notes/")
      ) {
        (item.data.tags || []).forEach((tag) => {
          const lowerCaseTag = tag.trim().toLowerCase();
          if (!tagMap.has(lowerCaseTag)) {
            tagMap.set(lowerCaseTag, {
              name: tag,
              key: lowerCaseTag,
              posts: [],
              // 新增：记录这个标签来自哪些文件
              sources: new Set(),
            });
          }
          tagMap.get(lowerCaseTag).posts.push(item);
          // 将当前文件的路径添加到来源集合中
          tagMap.get(lowerCaseTag).sources.add(item.inputPath);
        });
      }
    });

    const tagList = Array.from(tagMap.values()).sort((a, b) =>
      a.name.localeCompare(b.name)
    );

    // --- START: 调试代码来寻找冲突 ---
    const slugConflictMap = new Map();
    const slugifyFilter = eleventyConfig.getFilter("slug");

    tagList.forEach((tagInfo) => {
      const slug = slugifyFilter(tagInfo.key);
      if (!slugConflictMap.has(slug)) {
        slugConflictMap.set(slug, []);
      }
      // 我们现在存储更详细的信息
      slugConflictMap.get(slug).push({
        name: tagInfo.name,
        sources: Array.from(tagInfo.sources),
      });
    });

    console.log("\n--- Tag Slug Conflict Report ---");
    let foundConflict = false;
    slugConflictMap.forEach((tags, slug) => {
      if (tags.length > 1) {
        console.error(
          `[!! CONFLICT FOUND !!] The slug "${slug}" is generated by these tags:`
        );
        tags.forEach((tagData) => {
          console.error(
            `  - Tag: "${
              tagData.name
            }" is found in file(s): ${tagData.sources.join(", ")}`
          );
        });
        foundConflict = true;
      }
    });

    if (!foundConflict) {
      console.log("No tag conflicts found. All slugs are unique.");
    }
    console.log("--------------------------------\n");
    // --- END: 调试代码 ---

    return tagList;
  });

  // 集合 5: 演讲者集合 - 类似于标签集合但专门处理演讲者
  eleventyConfig.addCollection("speakerList", (collectionApi) => {
    const speakerMap = new Map();
    collectionApi.getAll().forEach((item) => {
      // 我们只处理那些在 posts, books, 或 notes 文件夹里的内容
      if (
        item.inputPath.includes("./src/posts/") ||
        item.inputPath.includes("./src/books/") ||
        item.inputPath.includes("./src/notes/")
      ) {
        // 处理 speaker 和 guest 字段
        const allSpeakers = [];
        
        // 从 speaker 字段提取演讲者
        const speaker = item.data.speaker;
        if (speaker && speaker.trim() !== "" && speaker.trim() !== "''") {
          const speakers = speaker
            .split(",")
            .map((s) => s.trim())
            .filter((s) => s !== "");
          allSpeakers.push(...speakers);
        }
        
        // 从 guest 字段提取嘉宾
        const guest = item.data.guest;
        if (guest && guest.trim() !== "" && guest.trim() !== "''") {
          const guests = guest
            .split(",")
            .map((g) => g.trim())
            .filter((g) => g !== "");
          allSpeakers.push(...guests);
        }
        
        // 去重并处理所有演讲者
        const uniqueSpeakers = [...new Set(allSpeakers.map(s => s.toLowerCase()))]
          .map(lowercaseName => allSpeakers.find(s => s.toLowerCase() === lowercaseName));
          
        uniqueSpeakers.forEach((speakerName) => {
          // 清理演讲者名称：去除引号和额外空格
          const cleanedName = speakerName.replace(/^['"]|['"]$/g, "").trim();
          if (cleanedName !== "") {
            const lowerCaseSpeaker = cleanedName.toLowerCase();
            if (!speakerMap.has(lowerCaseSpeaker)) {
              speakerMap.set(lowerCaseSpeaker, {
                name: cleanedName,
                key: lowerCaseSpeaker,
                posts: [],
                sources: new Set(),
              });
            }
            speakerMap.get(lowerCaseSpeaker).posts.push(item);
            speakerMap.get(lowerCaseSpeaker).sources.add(item.inputPath);
          }
        });
      }
    });

    const speakerList = Array.from(speakerMap.values()).sort((a, b) =>
      a.name.localeCompare(b.name)
    );

    // Debug output for speaker conflicts and resolve slug conflicts
    console.log("\n--- Speaker Slug Conflict Report ---");
    const slugConflictMap = new Map();
    const slugifyFilter = eleventyConfig.getFilter("slug");

    // First pass: detect conflicts
    speakerList.forEach((speakerInfo) => {
      const slug = slugifyFilter(speakerInfo.key);
      if (!slugConflictMap.has(slug)) {
        slugConflictMap.set(slug, []);
      }
      slugConflictMap.get(slug).push(speakerInfo);
    });

    // Second pass: resolve conflicts by adding unique identifiers
    let foundConflict = false;
    slugConflictMap.forEach((speakers, slug) => {
      if (speakers.length > 1) {
        console.error(
          `[!! SPEAKER CONFLICT FOUND !!] The slug "${slug}" is generated by these speakers:`
        );
        speakers.forEach((speakerData, index) => {
          console.error(
            `  - Speaker: "${
              speakerData.name
            }" is found in file(s): ${Array.from(speakerData.sources).join(
              ", "
            )}`
          );
          // Resolve conflict by adding index suffix
          speakerData.uniqueKey = `${speakerData.key}-${index + 1}`;
        });
        foundConflict = true;
      } else {
        // No conflict, use original key
        speakers[0].uniqueKey = speakers[0].key;
      }
    });

    if (!foundConflict) {
      console.log("No speaker conflicts found. All slugs are unique.");
    } else {
      console.log("Conflicts resolved by adding unique identifiers.");
    }
    console.log("------------------------------------\n");

    return speakerList;
  });

  // --- START: 新增的临时侦测代码 ---
  // 集合 6: 这个集合专门用来寻找有问题的 speaker 字段
  eleventyConfig.addCollection("longSpeakerDetector", function (collectionApi) {
    console.log("\n--- Checking for long speaker fields ---");
    let problemsFound = 0;
    const problematicFiles = [];
    
    collectionApi.getAll().forEach((item) => {
      // 检查多种可能的数据路径
      let speaker = null;
      
      // 尝试不同的数据访问路径
      if (item.data && item.data.speaker) {
        speaker = item.data.speaker;
      } else if (item.data && item.data.data && item.data.data.speaker) {
        speaker = item.data.data.speaker;
      }
      
      // 如果找到了 speaker 字段
      if (speaker) {
        // 如果 speaker 是字符串并且长度超过 100 个字符
        if (typeof speaker === "string" && speaker.length > 100) {
          problemsFound++;
          problematicFiles.push({
            file: item.inputPath,
            length: speaker.length,
            preview: speaker.substring(0, 200)
          });
          
          console.error(`\n[!! POTENTIAL PROBLEM FOUND !!]`);
          console.error(`File: ${item.inputPath}`);
          console.error(`Speaker field is too long (length: ${speaker.length})`);
          console.error(`First 200 characters of speaker field:`);
          console.error(`"${speaker.substring(0, 200)}..."`);
          console.error(`---`);
        }
        
        // 也检查是否包含换行符或其他奇怪字符
        if (typeof speaker === "string" && (speaker.includes('\n') || speaker.includes('\r'))) {
          console.warn(`[!! WARNING !!] Speaker field contains newlines in: ${item.inputPath}`);
          console.warn(`Speaker preview: "${speaker.substring(0, 100)}..."`);
        }
      }
    });
    
    console.log(`--- Check complete: ${problemsFound} problems found ---`);
    
    if (problemsFound > 0) {
      console.log(`\n🔧 FILES THAT NEED FIXING:`);
      problematicFiles.forEach((problem, index) => {
        console.log(`${index + 1}. File: ${problem.file}`);
        console.log(`   Length: ${problem.length} characters`);
        console.log(`   Preview: "${problem.preview}..."`);
        console.log('');
      });
      console.log(`\n💡 RECOMMENDATION: Fix the speaker field in these files by:`);
      console.log(`   1. Moving the content from 'speaker:' to the main body`);
      console.log(`   2. Adding a proper speaker name (or leave blank if unknown)`);
      console.log(`   3. Ensuring proper YAML frontmatter formatting\n`);
    }
    
    return []; // 这个集合不需要输出任何东西
  });
  // --- END: 新增的临时侦测代码 ---

  // --- Passthrough Copy & 核心配置 (保持不变) ---
  eleventyConfig.addPassthroughCopy("src/js");
  eleventyConfig.addPassthroughCopy("src/css");

  return {
    pathPrefix:
      process.env.NODE_ENV === "production" ? "/thought-foundry/" : "/",
    dir: {
      input: "src",
      output: "_site",
      includes: "_includes",
    },
  };
};
